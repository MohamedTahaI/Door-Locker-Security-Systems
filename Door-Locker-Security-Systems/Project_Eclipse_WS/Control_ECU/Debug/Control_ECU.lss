
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002136  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011a  00800060  00002136  000021ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  0080017a  0080017a  000022e4  2**0
                  ALLOC
  3 .stab         00002364  00000000  00000000  000022e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001391  00000000  00000000  00004648  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  000059d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d1  00000000  00000000  00005b59  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002010  00000000  00000000  00005d2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001161  00000000  00000000  00007d3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001003  00000000  00000000  00008e9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  00009ea0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002be  00000000  00000000  0000a040  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000090e  00000000  00000000  0000a2fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ac0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 dc 0d 	jmp	0x1bb8	; 0x1bb8 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 a9 0d 	jmp	0x1b52	; 0x1b52 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e3       	ldi	r30, 0x36	; 54
      68:	f1 e2       	ldi	r31, 0x21	; 33
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 38       	cpi	r26, 0x82	; 130
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 be 0a 	call	0x157c	; 0x157c <main>
      8a:	0c 94 99 10 	jmp	0x2132	; 0x2132 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 62 10 	jmp	0x20c4	; 0x20c4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 7e 10 	jmp	0x20fc	; 0x20fc <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 6e 10 	jmp	0x20dc	; 0x20dc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 8a 10 	jmp	0x2114	; 0x2114 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 6e 10 	jmp	0x20dc	; 0x20dc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 8a 10 	jmp	0x2114	; 0x2114 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 62 10 	jmp	0x20c4	; 0x20c4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 7e 10 	jmp	0x20fc	; 0x20fc <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 6e 10 	jmp	0x20dc	; 0x20dc <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 8a 10 	jmp	0x2114	; 0x2114 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 6e 10 	jmp	0x20dc	; 0x20dc <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 8a 10 	jmp	0x2114	; 0x2114 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 6e 10 	jmp	0x20dc	; 0x20dc <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 8a 10 	jmp	0x2114	; 0x2114 <__epilogue_restores__+0x18>

00000752 <__floatsisf>:
     752:	a8 e0       	ldi	r26, 0x08	; 8
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 6b 10 	jmp	0x20d6	; 0x20d6 <__prologue_saves__+0x12>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	da 01       	movw	r26, r20
     768:	c9 01       	movw	r24, r18
     76a:	88 27       	eor	r24, r24
     76c:	b7 fd       	sbrc	r27, 7
     76e:	83 95       	inc	r24
     770:	99 27       	eor	r25, r25
     772:	aa 27       	eor	r26, r26
     774:	bb 27       	eor	r27, r27
     776:	b8 2e       	mov	r11, r24
     778:	21 15       	cp	r18, r1
     77a:	31 05       	cpc	r19, r1
     77c:	41 05       	cpc	r20, r1
     77e:	51 05       	cpc	r21, r1
     780:	19 f4       	brne	.+6      	; 0x788 <__floatsisf+0x36>
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	89 83       	std	Y+1, r24	; 0x01
     786:	3a c0       	rjmp	.+116    	; 0x7fc <__floatsisf+0xaa>
     788:	88 23       	and	r24, r24
     78a:	a9 f0       	breq	.+42     	; 0x7b6 <__floatsisf+0x64>
     78c:	20 30       	cpi	r18, 0x00	; 0
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	38 07       	cpc	r19, r24
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	48 07       	cpc	r20, r24
     796:	80 e8       	ldi	r24, 0x80	; 128
     798:	58 07       	cpc	r21, r24
     79a:	29 f4       	brne	.+10     	; 0x7a6 <__floatsisf+0x54>
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	9f ec       	ldi	r25, 0xCF	; 207
     7a4:	30 c0       	rjmp	.+96     	; 0x806 <__floatsisf+0xb4>
     7a6:	ee 24       	eor	r14, r14
     7a8:	ff 24       	eor	r15, r15
     7aa:	87 01       	movw	r16, r14
     7ac:	e2 1a       	sub	r14, r18
     7ae:	f3 0a       	sbc	r15, r19
     7b0:	04 0b       	sbc	r16, r20
     7b2:	15 0b       	sbc	r17, r21
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <__floatsisf+0x68>
     7b6:	79 01       	movw	r14, r18
     7b8:	8a 01       	movw	r16, r20
     7ba:	8e e1       	ldi	r24, 0x1E	; 30
     7bc:	c8 2e       	mov	r12, r24
     7be:	d1 2c       	mov	r13, r1
     7c0:	dc 82       	std	Y+4, r13	; 0x04
     7c2:	cb 82       	std	Y+3, r12	; 0x03
     7c4:	ed 82       	std	Y+5, r14	; 0x05
     7c6:	fe 82       	std	Y+6, r15	; 0x06
     7c8:	0f 83       	std	Y+7, r16	; 0x07
     7ca:	18 87       	std	Y+8, r17	; 0x08
     7cc:	c8 01       	movw	r24, r16
     7ce:	b7 01       	movw	r22, r14
     7d0:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__clzsi2>
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	18 16       	cp	r1, r24
     7d8:	19 06       	cpc	r1, r25
     7da:	84 f4       	brge	.+32     	; 0x7fc <__floatsisf+0xaa>
     7dc:	08 2e       	mov	r0, r24
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <__floatsisf+0x96>
     7e0:	ee 0c       	add	r14, r14
     7e2:	ff 1c       	adc	r15, r15
     7e4:	00 1f       	adc	r16, r16
     7e6:	11 1f       	adc	r17, r17
     7e8:	0a 94       	dec	r0
     7ea:	d2 f7       	brpl	.-12     	; 0x7e0 <__floatsisf+0x8e>
     7ec:	ed 82       	std	Y+5, r14	; 0x05
     7ee:	fe 82       	std	Y+6, r15	; 0x06
     7f0:	0f 83       	std	Y+7, r16	; 0x07
     7f2:	18 87       	std	Y+8, r17	; 0x08
     7f4:	c8 1a       	sub	r12, r24
     7f6:	d9 0a       	sbc	r13, r25
     7f8:	dc 82       	std	Y+4, r13	; 0x04
     7fa:	cb 82       	std	Y+3, r12	; 0x03
     7fc:	ba 82       	std	Y+2, r11	; 0x02
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     806:	28 96       	adiw	r28, 0x08	; 8
     808:	e9 e0       	ldi	r30, 0x09	; 9
     80a:	0c 94 87 10 	jmp	0x210e	; 0x210e <__epilogue_restores__+0x12>

0000080e <__fixsfsi>:
     80e:	ac e0       	ldi	r26, 0x0C	; 12
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	ed e0       	ldi	r30, 0x0D	; 13
     814:	f4 e0       	ldi	r31, 0x04	; 4
     816:	0c 94 72 10 	jmp	0x20e4	; 0x20e4 <__prologue_saves__+0x20>
     81a:	69 83       	std	Y+1, r22	; 0x01
     81c:	7a 83       	std	Y+2, r23	; 0x02
     81e:	8b 83       	std	Y+3, r24	; 0x03
     820:	9c 83       	std	Y+4, r25	; 0x04
     822:	ce 01       	movw	r24, r28
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	be 01       	movw	r22, r28
     828:	6b 5f       	subi	r22, 0xFB	; 251
     82a:	7f 4f       	sbci	r23, 0xFF	; 255
     82c:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     830:	8d 81       	ldd	r24, Y+5	; 0x05
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	61 f1       	breq	.+88     	; 0x88e <__stack+0x2f>
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	50 f1       	brcs	.+84     	; 0x88e <__stack+0x2f>
     83a:	84 30       	cpi	r24, 0x04	; 4
     83c:	21 f4       	brne	.+8      	; 0x846 <__fixsfsi+0x38>
     83e:	8e 81       	ldd	r24, Y+6	; 0x06
     840:	88 23       	and	r24, r24
     842:	51 f1       	breq	.+84     	; 0x898 <__stack+0x39>
     844:	2e c0       	rjmp	.+92     	; 0x8a2 <__stack+0x43>
     846:	2f 81       	ldd	r18, Y+7	; 0x07
     848:	38 85       	ldd	r19, Y+8	; 0x08
     84a:	37 fd       	sbrc	r19, 7
     84c:	20 c0       	rjmp	.+64     	; 0x88e <__stack+0x2f>
     84e:	6e 81       	ldd	r22, Y+6	; 0x06
     850:	2f 31       	cpi	r18, 0x1F	; 31
     852:	31 05       	cpc	r19, r1
     854:	1c f0       	brlt	.+6      	; 0x85c <__fixsfsi+0x4e>
     856:	66 23       	and	r22, r22
     858:	f9 f0       	breq	.+62     	; 0x898 <__stack+0x39>
     85a:	23 c0       	rjmp	.+70     	; 0x8a2 <__stack+0x43>
     85c:	8e e1       	ldi	r24, 0x1E	; 30
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	82 1b       	sub	r24, r18
     862:	93 0b       	sbc	r25, r19
     864:	29 85       	ldd	r18, Y+9	; 0x09
     866:	3a 85       	ldd	r19, Y+10	; 0x0a
     868:	4b 85       	ldd	r20, Y+11	; 0x0b
     86a:	5c 85       	ldd	r21, Y+12	; 0x0c
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	56 95       	lsr	r21
     870:	47 95       	ror	r20
     872:	37 95       	ror	r19
     874:	27 95       	ror	r18
     876:	8a 95       	dec	r24
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	66 23       	and	r22, r22
     87c:	b1 f0       	breq	.+44     	; 0x8aa <__stack+0x4b>
     87e:	50 95       	com	r21
     880:	40 95       	com	r20
     882:	30 95       	com	r19
     884:	21 95       	neg	r18
     886:	3f 4f       	sbci	r19, 0xFF	; 255
     888:	4f 4f       	sbci	r20, 0xFF	; 255
     88a:	5f 4f       	sbci	r21, 0xFF	; 255
     88c:	0e c0       	rjmp	.+28     	; 0x8aa <__stack+0x4b>
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	09 c0       	rjmp	.+18     	; 0x8aa <__stack+0x4b>
     898:	2f ef       	ldi	r18, 0xFF	; 255
     89a:	3f ef       	ldi	r19, 0xFF	; 255
     89c:	4f ef       	ldi	r20, 0xFF	; 255
     89e:	5f e7       	ldi	r21, 0x7F	; 127
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__stack+0x4b>
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	50 e8       	ldi	r21, 0x80	; 128
     8aa:	b9 01       	movw	r22, r18
     8ac:	ca 01       	movw	r24, r20
     8ae:	2c 96       	adiw	r28, 0x0c	; 12
     8b0:	e2 e0       	ldi	r30, 0x02	; 2
     8b2:	0c 94 8e 10 	jmp	0x211c	; 0x211c <__epilogue_restores__+0x20>

000008b6 <__clzsi2>:
     8b6:	ef 92       	push	r14
     8b8:	ff 92       	push	r15
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	7b 01       	movw	r14, r22
     8c0:	8c 01       	movw	r16, r24
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	e8 16       	cp	r14, r24
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	f8 06       	cpc	r15, r24
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	08 07       	cpc	r16, r24
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	18 07       	cpc	r17, r24
     8d2:	88 f4       	brcc	.+34     	; 0x8f6 <__clzsi2+0x40>
     8d4:	8f ef       	ldi	r24, 0xFF	; 255
     8d6:	e8 16       	cp	r14, r24
     8d8:	f1 04       	cpc	r15, r1
     8da:	01 05       	cpc	r16, r1
     8dc:	11 05       	cpc	r17, r1
     8de:	31 f0       	breq	.+12     	; 0x8ec <__clzsi2+0x36>
     8e0:	28 f0       	brcs	.+10     	; 0x8ec <__clzsi2+0x36>
     8e2:	88 e0       	ldi	r24, 0x08	; 8
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
     8ea:	17 c0       	rjmp	.+46     	; 0x91a <__clzsi2+0x64>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	a0 e0       	ldi	r26, 0x00	; 0
     8f2:	b0 e0       	ldi	r27, 0x00	; 0
     8f4:	12 c0       	rjmp	.+36     	; 0x91a <__clzsi2+0x64>
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	e8 16       	cp	r14, r24
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	f8 06       	cpc	r15, r24
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	08 07       	cpc	r16, r24
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	18 07       	cpc	r17, r24
     906:	28 f0       	brcs	.+10     	; 0x912 <__clzsi2+0x5c>
     908:	88 e1       	ldi	r24, 0x18	; 24
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	04 c0       	rjmp	.+8      	; 0x91a <__clzsi2+0x64>
     912:	80 e1       	ldi	r24, 0x10	; 16
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	20 e2       	ldi	r18, 0x20	; 32
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	28 1b       	sub	r18, r24
     924:	39 0b       	sbc	r19, r25
     926:	4a 0b       	sbc	r20, r26
     928:	5b 0b       	sbc	r21, r27
     92a:	04 c0       	rjmp	.+8      	; 0x934 <__clzsi2+0x7e>
     92c:	16 95       	lsr	r17
     92e:	07 95       	ror	r16
     930:	f7 94       	ror	r15
     932:	e7 94       	ror	r14
     934:	8a 95       	dec	r24
     936:	d2 f7       	brpl	.-12     	; 0x92c <__clzsi2+0x76>
     938:	f7 01       	movw	r30, r14
     93a:	e8 59       	subi	r30, 0x98	; 152
     93c:	ff 4f       	sbci	r31, 0xFF	; 255
     93e:	80 81       	ld	r24, Z
     940:	28 1b       	sub	r18, r24
     942:	31 09       	sbc	r19, r1
     944:	41 09       	sbc	r20, r1
     946:	51 09       	sbc	r21, r1
     948:	c9 01       	movw	r24, r18
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	ff 90       	pop	r15
     950:	ef 90       	pop	r14
     952:	08 95       	ret

00000954 <__pack_f>:
     954:	df 92       	push	r13
     956:	ef 92       	push	r14
     958:	ff 92       	push	r15
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	fc 01       	movw	r30, r24
     960:	e4 80       	ldd	r14, Z+4	; 0x04
     962:	f5 80       	ldd	r15, Z+5	; 0x05
     964:	06 81       	ldd	r16, Z+6	; 0x06
     966:	17 81       	ldd	r17, Z+7	; 0x07
     968:	d1 80       	ldd	r13, Z+1	; 0x01
     96a:	80 81       	ld	r24, Z
     96c:	82 30       	cpi	r24, 0x02	; 2
     96e:	48 f4       	brcc	.+18     	; 0x982 <__pack_f+0x2e>
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	a0 e1       	ldi	r26, 0x10	; 16
     976:	b0 e0       	ldi	r27, 0x00	; 0
     978:	e8 2a       	or	r14, r24
     97a:	f9 2a       	or	r15, r25
     97c:	0a 2b       	or	r16, r26
     97e:	1b 2b       	or	r17, r27
     980:	a5 c0       	rjmp	.+330    	; 0xacc <__pack_f+0x178>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	09 f4       	brne	.+2      	; 0x988 <__pack_f+0x34>
     986:	9f c0       	rjmp	.+318    	; 0xac6 <__pack_f+0x172>
     988:	82 30       	cpi	r24, 0x02	; 2
     98a:	21 f4       	brne	.+8      	; 0x994 <__pack_f+0x40>
     98c:	ee 24       	eor	r14, r14
     98e:	ff 24       	eor	r15, r15
     990:	87 01       	movw	r16, r14
     992:	05 c0       	rjmp	.+10     	; 0x99e <__pack_f+0x4a>
     994:	e1 14       	cp	r14, r1
     996:	f1 04       	cpc	r15, r1
     998:	01 05       	cpc	r16, r1
     99a:	11 05       	cpc	r17, r1
     99c:	19 f4       	brne	.+6      	; 0x9a4 <__pack_f+0x50>
     99e:	e0 e0       	ldi	r30, 0x00	; 0
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	96 c0       	rjmp	.+300    	; 0xad0 <__pack_f+0x17c>
     9a4:	62 81       	ldd	r22, Z+2	; 0x02
     9a6:	73 81       	ldd	r23, Z+3	; 0x03
     9a8:	9f ef       	ldi	r25, 0xFF	; 255
     9aa:	62 38       	cpi	r22, 0x82	; 130
     9ac:	79 07       	cpc	r23, r25
     9ae:	0c f0       	brlt	.+2      	; 0x9b2 <__pack_f+0x5e>
     9b0:	5b c0       	rjmp	.+182    	; 0xa68 <__pack_f+0x114>
     9b2:	22 e8       	ldi	r18, 0x82	; 130
     9b4:	3f ef       	ldi	r19, 0xFF	; 255
     9b6:	26 1b       	sub	r18, r22
     9b8:	37 0b       	sbc	r19, r23
     9ba:	2a 31       	cpi	r18, 0x1A	; 26
     9bc:	31 05       	cpc	r19, r1
     9be:	2c f0       	brlt	.+10     	; 0x9ca <__pack_f+0x76>
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	40 e0       	ldi	r20, 0x00	; 0
     9c6:	50 e0       	ldi	r21, 0x00	; 0
     9c8:	2a c0       	rjmp	.+84     	; 0xa1e <__pack_f+0xca>
     9ca:	b8 01       	movw	r22, r16
     9cc:	a7 01       	movw	r20, r14
     9ce:	02 2e       	mov	r0, r18
     9d0:	04 c0       	rjmp	.+8      	; 0x9da <__pack_f+0x86>
     9d2:	76 95       	lsr	r23
     9d4:	67 95       	ror	r22
     9d6:	57 95       	ror	r21
     9d8:	47 95       	ror	r20
     9da:	0a 94       	dec	r0
     9dc:	d2 f7       	brpl	.-12     	; 0x9d2 <__pack_f+0x7e>
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	a0 e0       	ldi	r26, 0x00	; 0
     9e4:	b0 e0       	ldi	r27, 0x00	; 0
     9e6:	04 c0       	rjmp	.+8      	; 0x9f0 <__pack_f+0x9c>
     9e8:	88 0f       	add	r24, r24
     9ea:	99 1f       	adc	r25, r25
     9ec:	aa 1f       	adc	r26, r26
     9ee:	bb 1f       	adc	r27, r27
     9f0:	2a 95       	dec	r18
     9f2:	d2 f7       	brpl	.-12     	; 0x9e8 <__pack_f+0x94>
     9f4:	01 97       	sbiw	r24, 0x01	; 1
     9f6:	a1 09       	sbc	r26, r1
     9f8:	b1 09       	sbc	r27, r1
     9fa:	8e 21       	and	r24, r14
     9fc:	9f 21       	and	r25, r15
     9fe:	a0 23       	and	r26, r16
     a00:	b1 23       	and	r27, r17
     a02:	00 97       	sbiw	r24, 0x00	; 0
     a04:	a1 05       	cpc	r26, r1
     a06:	b1 05       	cpc	r27, r1
     a08:	21 f0       	breq	.+8      	; 0xa12 <__pack_f+0xbe>
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	a0 e0       	ldi	r26, 0x00	; 0
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	9a 01       	movw	r18, r20
     a14:	ab 01       	movw	r20, r22
     a16:	28 2b       	or	r18, r24
     a18:	39 2b       	or	r19, r25
     a1a:	4a 2b       	or	r20, r26
     a1c:	5b 2b       	or	r21, r27
     a1e:	da 01       	movw	r26, r20
     a20:	c9 01       	movw	r24, r18
     a22:	8f 77       	andi	r24, 0x7F	; 127
     a24:	90 70       	andi	r25, 0x00	; 0
     a26:	a0 70       	andi	r26, 0x00	; 0
     a28:	b0 70       	andi	r27, 0x00	; 0
     a2a:	80 34       	cpi	r24, 0x40	; 64
     a2c:	91 05       	cpc	r25, r1
     a2e:	a1 05       	cpc	r26, r1
     a30:	b1 05       	cpc	r27, r1
     a32:	39 f4       	brne	.+14     	; 0xa42 <__pack_f+0xee>
     a34:	27 ff       	sbrs	r18, 7
     a36:	09 c0       	rjmp	.+18     	; 0xa4a <__pack_f+0xf6>
     a38:	20 5c       	subi	r18, 0xC0	; 192
     a3a:	3f 4f       	sbci	r19, 0xFF	; 255
     a3c:	4f 4f       	sbci	r20, 0xFF	; 255
     a3e:	5f 4f       	sbci	r21, 0xFF	; 255
     a40:	04 c0       	rjmp	.+8      	; 0xa4a <__pack_f+0xf6>
     a42:	21 5c       	subi	r18, 0xC1	; 193
     a44:	3f 4f       	sbci	r19, 0xFF	; 255
     a46:	4f 4f       	sbci	r20, 0xFF	; 255
     a48:	5f 4f       	sbci	r21, 0xFF	; 255
     a4a:	e0 e0       	ldi	r30, 0x00	; 0
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	20 30       	cpi	r18, 0x00	; 0
     a50:	a0 e0       	ldi	r26, 0x00	; 0
     a52:	3a 07       	cpc	r19, r26
     a54:	a0 e0       	ldi	r26, 0x00	; 0
     a56:	4a 07       	cpc	r20, r26
     a58:	a0 e4       	ldi	r26, 0x40	; 64
     a5a:	5a 07       	cpc	r21, r26
     a5c:	10 f0       	brcs	.+4      	; 0xa62 <__pack_f+0x10e>
     a5e:	e1 e0       	ldi	r30, 0x01	; 1
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	79 01       	movw	r14, r18
     a64:	8a 01       	movw	r16, r20
     a66:	27 c0       	rjmp	.+78     	; 0xab6 <__pack_f+0x162>
     a68:	60 38       	cpi	r22, 0x80	; 128
     a6a:	71 05       	cpc	r23, r1
     a6c:	64 f5       	brge	.+88     	; 0xac6 <__pack_f+0x172>
     a6e:	fb 01       	movw	r30, r22
     a70:	e1 58       	subi	r30, 0x81	; 129
     a72:	ff 4f       	sbci	r31, 0xFF	; 255
     a74:	d8 01       	movw	r26, r16
     a76:	c7 01       	movw	r24, r14
     a78:	8f 77       	andi	r24, 0x7F	; 127
     a7a:	90 70       	andi	r25, 0x00	; 0
     a7c:	a0 70       	andi	r26, 0x00	; 0
     a7e:	b0 70       	andi	r27, 0x00	; 0
     a80:	80 34       	cpi	r24, 0x40	; 64
     a82:	91 05       	cpc	r25, r1
     a84:	a1 05       	cpc	r26, r1
     a86:	b1 05       	cpc	r27, r1
     a88:	39 f4       	brne	.+14     	; 0xa98 <__pack_f+0x144>
     a8a:	e7 fe       	sbrs	r14, 7
     a8c:	0d c0       	rjmp	.+26     	; 0xaa8 <__pack_f+0x154>
     a8e:	80 e4       	ldi	r24, 0x40	; 64
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	a0 e0       	ldi	r26, 0x00	; 0
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	04 c0       	rjmp	.+8      	; 0xaa0 <__pack_f+0x14c>
     a98:	8f e3       	ldi	r24, 0x3F	; 63
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	a0 e0       	ldi	r26, 0x00	; 0
     a9e:	b0 e0       	ldi	r27, 0x00	; 0
     aa0:	e8 0e       	add	r14, r24
     aa2:	f9 1e       	adc	r15, r25
     aa4:	0a 1f       	adc	r16, r26
     aa6:	1b 1f       	adc	r17, r27
     aa8:	17 ff       	sbrs	r17, 7
     aaa:	05 c0       	rjmp	.+10     	; 0xab6 <__pack_f+0x162>
     aac:	16 95       	lsr	r17
     aae:	07 95       	ror	r16
     ab0:	f7 94       	ror	r15
     ab2:	e7 94       	ror	r14
     ab4:	31 96       	adiw	r30, 0x01	; 1
     ab6:	87 e0       	ldi	r24, 0x07	; 7
     ab8:	16 95       	lsr	r17
     aba:	07 95       	ror	r16
     abc:	f7 94       	ror	r15
     abe:	e7 94       	ror	r14
     ac0:	8a 95       	dec	r24
     ac2:	d1 f7       	brne	.-12     	; 0xab8 <__pack_f+0x164>
     ac4:	05 c0       	rjmp	.+10     	; 0xad0 <__pack_f+0x17c>
     ac6:	ee 24       	eor	r14, r14
     ac8:	ff 24       	eor	r15, r15
     aca:	87 01       	movw	r16, r14
     acc:	ef ef       	ldi	r30, 0xFF	; 255
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	6e 2f       	mov	r22, r30
     ad2:	67 95       	ror	r22
     ad4:	66 27       	eor	r22, r22
     ad6:	67 95       	ror	r22
     ad8:	90 2f       	mov	r25, r16
     ada:	9f 77       	andi	r25, 0x7F	; 127
     adc:	d7 94       	ror	r13
     ade:	dd 24       	eor	r13, r13
     ae0:	d7 94       	ror	r13
     ae2:	8e 2f       	mov	r24, r30
     ae4:	86 95       	lsr	r24
     ae6:	49 2f       	mov	r20, r25
     ae8:	46 2b       	or	r20, r22
     aea:	58 2f       	mov	r21, r24
     aec:	5d 29       	or	r21, r13
     aee:	b7 01       	movw	r22, r14
     af0:	ca 01       	movw	r24, r20
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	df 90       	pop	r13
     afc:	08 95       	ret

00000afe <__unpack_f>:
     afe:	fc 01       	movw	r30, r24
     b00:	db 01       	movw	r26, r22
     b02:	40 81       	ld	r20, Z
     b04:	51 81       	ldd	r21, Z+1	; 0x01
     b06:	22 81       	ldd	r18, Z+2	; 0x02
     b08:	62 2f       	mov	r22, r18
     b0a:	6f 77       	andi	r22, 0x7F	; 127
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	22 1f       	adc	r18, r18
     b10:	22 27       	eor	r18, r18
     b12:	22 1f       	adc	r18, r18
     b14:	93 81       	ldd	r25, Z+3	; 0x03
     b16:	89 2f       	mov	r24, r25
     b18:	88 0f       	add	r24, r24
     b1a:	82 2b       	or	r24, r18
     b1c:	28 2f       	mov	r18, r24
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	99 1f       	adc	r25, r25
     b22:	99 27       	eor	r25, r25
     b24:	99 1f       	adc	r25, r25
     b26:	11 96       	adiw	r26, 0x01	; 1
     b28:	9c 93       	st	X, r25
     b2a:	11 97       	sbiw	r26, 0x01	; 1
     b2c:	21 15       	cp	r18, r1
     b2e:	31 05       	cpc	r19, r1
     b30:	a9 f5       	brne	.+106    	; 0xb9c <__unpack_f+0x9e>
     b32:	41 15       	cp	r20, r1
     b34:	51 05       	cpc	r21, r1
     b36:	61 05       	cpc	r22, r1
     b38:	71 05       	cpc	r23, r1
     b3a:	11 f4       	brne	.+4      	; 0xb40 <__unpack_f+0x42>
     b3c:	82 e0       	ldi	r24, 0x02	; 2
     b3e:	37 c0       	rjmp	.+110    	; 0xbae <__unpack_f+0xb0>
     b40:	82 e8       	ldi	r24, 0x82	; 130
     b42:	9f ef       	ldi	r25, 0xFF	; 255
     b44:	13 96       	adiw	r26, 0x03	; 3
     b46:	9c 93       	st	X, r25
     b48:	8e 93       	st	-X, r24
     b4a:	12 97       	sbiw	r26, 0x02	; 2
     b4c:	9a 01       	movw	r18, r20
     b4e:	ab 01       	movw	r20, r22
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	6a 95       	dec	r22
     b5c:	d1 f7       	brne	.-12     	; 0xb52 <__unpack_f+0x54>
     b5e:	83 e0       	ldi	r24, 0x03	; 3
     b60:	8c 93       	st	X, r24
     b62:	0d c0       	rjmp	.+26     	; 0xb7e <__unpack_f+0x80>
     b64:	22 0f       	add	r18, r18
     b66:	33 1f       	adc	r19, r19
     b68:	44 1f       	adc	r20, r20
     b6a:	55 1f       	adc	r21, r21
     b6c:	12 96       	adiw	r26, 0x02	; 2
     b6e:	8d 91       	ld	r24, X+
     b70:	9c 91       	ld	r25, X
     b72:	13 97       	sbiw	r26, 0x03	; 3
     b74:	01 97       	sbiw	r24, 0x01	; 1
     b76:	13 96       	adiw	r26, 0x03	; 3
     b78:	9c 93       	st	X, r25
     b7a:	8e 93       	st	-X, r24
     b7c:	12 97       	sbiw	r26, 0x02	; 2
     b7e:	20 30       	cpi	r18, 0x00	; 0
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	38 07       	cpc	r19, r24
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	48 07       	cpc	r20, r24
     b88:	80 e4       	ldi	r24, 0x40	; 64
     b8a:	58 07       	cpc	r21, r24
     b8c:	58 f3       	brcs	.-42     	; 0xb64 <__unpack_f+0x66>
     b8e:	14 96       	adiw	r26, 0x04	; 4
     b90:	2d 93       	st	X+, r18
     b92:	3d 93       	st	X+, r19
     b94:	4d 93       	st	X+, r20
     b96:	5c 93       	st	X, r21
     b98:	17 97       	sbiw	r26, 0x07	; 7
     b9a:	08 95       	ret
     b9c:	2f 3f       	cpi	r18, 0xFF	; 255
     b9e:	31 05       	cpc	r19, r1
     ba0:	79 f4       	brne	.+30     	; 0xbc0 <__unpack_f+0xc2>
     ba2:	41 15       	cp	r20, r1
     ba4:	51 05       	cpc	r21, r1
     ba6:	61 05       	cpc	r22, r1
     ba8:	71 05       	cpc	r23, r1
     baa:	19 f4       	brne	.+6      	; 0xbb2 <__unpack_f+0xb4>
     bac:	84 e0       	ldi	r24, 0x04	; 4
     bae:	8c 93       	st	X, r24
     bb0:	08 95       	ret
     bb2:	64 ff       	sbrs	r22, 4
     bb4:	03 c0       	rjmp	.+6      	; 0xbbc <__unpack_f+0xbe>
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	8c 93       	st	X, r24
     bba:	12 c0       	rjmp	.+36     	; 0xbe0 <__unpack_f+0xe2>
     bbc:	1c 92       	st	X, r1
     bbe:	10 c0       	rjmp	.+32     	; 0xbe0 <__unpack_f+0xe2>
     bc0:	2f 57       	subi	r18, 0x7F	; 127
     bc2:	30 40       	sbci	r19, 0x00	; 0
     bc4:	13 96       	adiw	r26, 0x03	; 3
     bc6:	3c 93       	st	X, r19
     bc8:	2e 93       	st	-X, r18
     bca:	12 97       	sbiw	r26, 0x02	; 2
     bcc:	83 e0       	ldi	r24, 0x03	; 3
     bce:	8c 93       	st	X, r24
     bd0:	87 e0       	ldi	r24, 0x07	; 7
     bd2:	44 0f       	add	r20, r20
     bd4:	55 1f       	adc	r21, r21
     bd6:	66 1f       	adc	r22, r22
     bd8:	77 1f       	adc	r23, r23
     bda:	8a 95       	dec	r24
     bdc:	d1 f7       	brne	.-12     	; 0xbd2 <__unpack_f+0xd4>
     bde:	70 64       	ori	r23, 0x40	; 64
     be0:	14 96       	adiw	r26, 0x04	; 4
     be2:	4d 93       	st	X+, r20
     be4:	5d 93       	st	X+, r21
     be6:	6d 93       	st	X+, r22
     be8:	7c 93       	st	X, r23
     bea:	17 97       	sbiw	r26, 0x07	; 7
     bec:	08 95       	ret

00000bee <__fpcmp_parts_f>:
     bee:	1f 93       	push	r17
     bf0:	dc 01       	movw	r26, r24
     bf2:	fb 01       	movw	r30, r22
     bf4:	9c 91       	ld	r25, X
     bf6:	92 30       	cpi	r25, 0x02	; 2
     bf8:	08 f4       	brcc	.+2      	; 0xbfc <__fpcmp_parts_f+0xe>
     bfa:	47 c0       	rjmp	.+142    	; 0xc8a <__fpcmp_parts_f+0x9c>
     bfc:	80 81       	ld	r24, Z
     bfe:	82 30       	cpi	r24, 0x02	; 2
     c00:	08 f4       	brcc	.+2      	; 0xc04 <__fpcmp_parts_f+0x16>
     c02:	43 c0       	rjmp	.+134    	; 0xc8a <__fpcmp_parts_f+0x9c>
     c04:	94 30       	cpi	r25, 0x04	; 4
     c06:	51 f4       	brne	.+20     	; 0xc1c <__fpcmp_parts_f+0x2e>
     c08:	11 96       	adiw	r26, 0x01	; 1
     c0a:	1c 91       	ld	r17, X
     c0c:	84 30       	cpi	r24, 0x04	; 4
     c0e:	99 f5       	brne	.+102    	; 0xc76 <__fpcmp_parts_f+0x88>
     c10:	81 81       	ldd	r24, Z+1	; 0x01
     c12:	68 2f       	mov	r22, r24
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	61 1b       	sub	r22, r17
     c18:	71 09       	sbc	r23, r1
     c1a:	3f c0       	rjmp	.+126    	; 0xc9a <__fpcmp_parts_f+0xac>
     c1c:	84 30       	cpi	r24, 0x04	; 4
     c1e:	21 f0       	breq	.+8      	; 0xc28 <__fpcmp_parts_f+0x3a>
     c20:	92 30       	cpi	r25, 0x02	; 2
     c22:	31 f4       	brne	.+12     	; 0xc30 <__fpcmp_parts_f+0x42>
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	b9 f1       	breq	.+110    	; 0xc96 <__fpcmp_parts_f+0xa8>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	88 23       	and	r24, r24
     c2c:	89 f1       	breq	.+98     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c2e:	2d c0       	rjmp	.+90     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c30:	11 96       	adiw	r26, 0x01	; 1
     c32:	1c 91       	ld	r17, X
     c34:	11 97       	sbiw	r26, 0x01	; 1
     c36:	82 30       	cpi	r24, 0x02	; 2
     c38:	f1 f0       	breq	.+60     	; 0xc76 <__fpcmp_parts_f+0x88>
     c3a:	81 81       	ldd	r24, Z+1	; 0x01
     c3c:	18 17       	cp	r17, r24
     c3e:	d9 f4       	brne	.+54     	; 0xc76 <__fpcmp_parts_f+0x88>
     c40:	12 96       	adiw	r26, 0x02	; 2
     c42:	2d 91       	ld	r18, X+
     c44:	3c 91       	ld	r19, X
     c46:	13 97       	sbiw	r26, 0x03	; 3
     c48:	82 81       	ldd	r24, Z+2	; 0x02
     c4a:	93 81       	ldd	r25, Z+3	; 0x03
     c4c:	82 17       	cp	r24, r18
     c4e:	93 07       	cpc	r25, r19
     c50:	94 f0       	brlt	.+36     	; 0xc76 <__fpcmp_parts_f+0x88>
     c52:	28 17       	cp	r18, r24
     c54:	39 07       	cpc	r19, r25
     c56:	bc f0       	brlt	.+46     	; 0xc86 <__fpcmp_parts_f+0x98>
     c58:	14 96       	adiw	r26, 0x04	; 4
     c5a:	8d 91       	ld	r24, X+
     c5c:	9d 91       	ld	r25, X+
     c5e:	0d 90       	ld	r0, X+
     c60:	bc 91       	ld	r27, X
     c62:	a0 2d       	mov	r26, r0
     c64:	24 81       	ldd	r18, Z+4	; 0x04
     c66:	35 81       	ldd	r19, Z+5	; 0x05
     c68:	46 81       	ldd	r20, Z+6	; 0x06
     c6a:	57 81       	ldd	r21, Z+7	; 0x07
     c6c:	28 17       	cp	r18, r24
     c6e:	39 07       	cpc	r19, r25
     c70:	4a 07       	cpc	r20, r26
     c72:	5b 07       	cpc	r21, r27
     c74:	18 f4       	brcc	.+6      	; 0xc7c <__fpcmp_parts_f+0x8e>
     c76:	11 23       	and	r17, r17
     c78:	41 f0       	breq	.+16     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c7a:	0a c0       	rjmp	.+20     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c7c:	82 17       	cp	r24, r18
     c7e:	93 07       	cpc	r25, r19
     c80:	a4 07       	cpc	r26, r20
     c82:	b5 07       	cpc	r27, r21
     c84:	40 f4       	brcc	.+16     	; 0xc96 <__fpcmp_parts_f+0xa8>
     c86:	11 23       	and	r17, r17
     c88:	19 f0       	breq	.+6      	; 0xc90 <__fpcmp_parts_f+0xa2>
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	05 c0       	rjmp	.+10     	; 0xc9a <__fpcmp_parts_f+0xac>
     c90:	6f ef       	ldi	r22, 0xFF	; 255
     c92:	7f ef       	ldi	r23, 0xFF	; 255
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <__fpcmp_parts_f+0xac>
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	cb 01       	movw	r24, r22
     c9c:	1f 91       	pop	r17
     c9e:	08 95       	ret

00000ca0 <BUZZER_init>:
#include "buzzer.h"
#include "gpio.h"


void BUZZER_init(void)
{
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID,BUZZER_PIN_ID , PIN_OUTPUT);
     ca8:	80 e0       	ldi	r24, 0x00	; 0
     caa:	60 e0       	ldi	r22, 0x00	; 0
     cac:	41 e0       	ldi	r20, 0x01	; 1
     cae:	0e 94 80 07 	call	0xf00	; 0xf00 <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_HIGH);
     cb2:	80 e0       	ldi	r24, 0x00	; 0
     cb4:	60 e0       	ldi	r22, 0x00	; 0
     cb6:	41 e0       	ldi	r20, 0x01	; 1
     cb8:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <GPIO_writePin>
}
     cbc:	cf 91       	pop	r28
     cbe:	df 91       	pop	r29
     cc0:	08 95       	ret

00000cc2 <BUZZER_on>:


void BUZZER_on(void)
{
     cc2:	df 93       	push	r29
     cc4:	cf 93       	push	r28
     cc6:	cd b7       	in	r28, 0x3d	; 61
     cc8:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_LOW);
     cca:	80 e0       	ldi	r24, 0x00	; 0
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	40 e0       	ldi	r20, 0x00	; 0
     cd0:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <GPIO_writePin>
}
     cd4:	cf 91       	pop	r28
     cd6:	df 91       	pop	r29
     cd8:	08 95       	ret

00000cda <BUZZER_off>:

void BUZZER_off(void)
{
     cda:	df 93       	push	r29
     cdc:	cf 93       	push	r28
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_HIGH);
     ce2:	80 e0       	ldi	r24, 0x00	; 0
     ce4:	60 e0       	ldi	r22, 0x00	; 0
     ce6:	41 e0       	ldi	r20, 0x01	; 1
     ce8:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <GPIO_writePin>
}
     cec:	cf 91       	pop	r28
     cee:	df 91       	pop	r29
     cf0:	08 95       	ret

00000cf2 <DcMotor_Init>:
#include "dc_motor.h"
#include "gpio.h"
#include "pwm.h"

void DcMotor_Init(void)
{
     cf2:	df 93       	push	r29
     cf4:	cf 93       	push	r28
     cf6:	cd b7       	in	r28, 0x3d	; 61
     cf8:	de b7       	in	r29, 0x3e	; 62
	// put two pin output to motor
	GPIO_setupPinDirection(DC_MOTOR_OUT_FIRST_PORT_ID ,DC_MOTOR_OUT_FIRST_PIN_ID ,PIN_OUTPUT);
     cfa:	83 e0       	ldi	r24, 0x03	; 3
     cfc:	67 e0       	ldi	r22, 0x07	; 7
     cfe:	41 e0       	ldi	r20, 0x01	; 1
     d00:	0e 94 80 07 	call	0xf00	; 0xf00 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_OUT_SECOND_PORT_ID ,DC_MOTOR_OUT_SECOND_PIN_ID ,PIN_OUTPUT);
     d04:	83 e0       	ldi	r24, 0x03	; 3
     d06:	66 e0       	ldi	r22, 0x06	; 6
     d08:	41 e0       	ldi	r20, 0x01	; 1
     d0a:	0e 94 80 07 	call	0xf00	; 0xf00 <GPIO_setupPinDirection>
   // by default  close motor
	GPIO_writePin(DC_MOTOR_OUT_FIRST_PORT_ID ,DC_MOTOR_OUT_FIRST_PIN_ID ,LOGIC_LOW );
     d0e:	83 e0       	ldi	r24, 0x03	; 3
     d10:	67 e0       	ldi	r22, 0x07	; 7
     d12:	40 e0       	ldi	r20, 0x00	; 0
     d14:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_OUT_SECOND_PORT_ID ,DC_MOTOR_OUT_SECOND_PIN_ID ,LOGIC_LOW );
     d18:	83 e0       	ldi	r24, 0x03	; 3
     d1a:	66 e0       	ldi	r22, 0x06	; 6
     d1c:	40 e0       	ldi	r20, 0x00	; 0
     d1e:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <GPIO_writePin>

}
     d22:	cf 91       	pop	r28
     d24:	df 91       	pop	r29
     d26:	08 95       	ret

00000d28 <DcMotor_Rotate>:
// need the direction and speed and not return
void DcMotor_Rotate(DcMotor_State state,uint8 speed)
{
     d28:	df 93       	push	r29
     d2a:	cf 93       	push	r28
     d2c:	00 d0       	rcall	.+0      	; 0xd2e <DcMotor_Rotate+0x6>
     d2e:	00 d0       	rcall	.+0      	; 0xd30 <DcMotor_Rotate+0x8>
     d30:	cd b7       	in	r28, 0x3d	; 61
     d32:	de b7       	in	r29, 0x3e	; 62
     d34:	89 83       	std	Y+1, r24	; 0x01
     d36:	6a 83       	std	Y+2, r22	; 0x02
	switch(state)
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	28 2f       	mov	r18, r24
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	3c 83       	std	Y+4, r19	; 0x04
     d40:	2b 83       	std	Y+3, r18	; 0x03
     d42:	8b 81       	ldd	r24, Y+3	; 0x03
     d44:	9c 81       	ldd	r25, Y+4	; 0x04
     d46:	81 30       	cpi	r24, 0x01	; 1
     d48:	91 05       	cpc	r25, r1
     d4a:	b9 f0       	breq	.+46     	; 0xd7a <DcMotor_Rotate+0x52>
     d4c:	2b 81       	ldd	r18, Y+3	; 0x03
     d4e:	3c 81       	ldd	r19, Y+4	; 0x04
     d50:	22 30       	cpi	r18, 0x02	; 2
     d52:	31 05       	cpc	r19, r1
     d54:	01 f1       	breq	.+64     	; 0xd96 <DcMotor_Rotate+0x6e>
     d56:	8b 81       	ldd	r24, Y+3	; 0x03
     d58:	9c 81       	ldd	r25, Y+4	; 0x04
     d5a:	00 97       	sbiw	r24, 0x00	; 0
     d5c:	49 f5       	brne	.+82     	; 0xdb0 <DcMotor_Rotate+0x88>
	{
	case STOP :
		//stop motor
		GPIO_writePin(DC_MOTOR_OUT_FIRST_PORT_ID ,DC_MOTOR_OUT_FIRST_PIN_ID ,LOGIC_LOW );
     d5e:	83 e0       	ldi	r24, 0x03	; 3
     d60:	67 e0       	ldi	r22, 0x07	; 7
     d62:	40 e0       	ldi	r20, 0x00	; 0
     d64:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_OUT_SECOND_PORT_ID ,DC_MOTOR_OUT_SECOND_PIN_ID ,LOGIC_LOW );
     d68:	83 e0       	ldi	r24, 0x03	; 3
     d6a:	66 e0       	ldi	r22, 0x06	; 6
     d6c:	40 e0       	ldi	r20, 0x00	; 0
     d6e:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <GPIO_writePin>
		//put speed to pwm driver
		PWM_Timer0_Start(speed);
     d72:	8a 81       	ldd	r24, Y+2	; 0x02
     d74:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <PWM_Timer0_Start>
     d78:	1b c0       	rjmp	.+54     	; 0xdb0 <DcMotor_Rotate+0x88>

	break;
	case CW :
		//clock wise direction
		GPIO_writePin(DC_MOTOR_OUT_FIRST_PORT_ID ,DC_MOTOR_OUT_FIRST_PIN_ID,LOGIC_HIGH );
     d7a:	83 e0       	ldi	r24, 0x03	; 3
     d7c:	67 e0       	ldi	r22, 0x07	; 7
     d7e:	41 e0       	ldi	r20, 0x01	; 1
     d80:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_OUT_SECOND_PORT_ID ,DC_MOTOR_OUT_SECOND_PIN_ID ,LOGIC_LOW );
     d84:	83 e0       	ldi	r24, 0x03	; 3
     d86:	66 e0       	ldi	r22, 0x06	; 6
     d88:	40 e0       	ldi	r20, 0x00	; 0
     d8a:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <GPIO_writePin>
		//put speed to pwm driver
		PWM_Timer0_Start(speed);
     d8e:	8a 81       	ldd	r24, Y+2	; 0x02
     d90:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <PWM_Timer0_Start>
     d94:	0d c0       	rjmp	.+26     	; 0xdb0 <DcMotor_Rotate+0x88>

	break;
	case A_CW :

		// anti clock wise
		GPIO_writePin(DC_MOTOR_OUT_FIRST_PORT_ID ,DC_MOTOR_OUT_FIRST_PIN_ID,LOGIC_LOW );
     d96:	83 e0       	ldi	r24, 0x03	; 3
     d98:	67 e0       	ldi	r22, 0x07	; 7
     d9a:	40 e0       	ldi	r20, 0x00	; 0
     d9c:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_OUT_SECOND_PORT_ID ,DC_MOTOR_OUT_SECOND_PIN_ID ,LOGIC_HIGH );
     da0:	83 e0       	ldi	r24, 0x03	; 3
     da2:	66 e0       	ldi	r22, 0x06	; 6
     da4:	41 e0       	ldi	r20, 0x01	; 1
     da6:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <GPIO_writePin>
		//put speed to pwm driver
		PWM_Timer0_Start(speed);
     daa:	8a 81       	ldd	r24, Y+2	; 0x02
     dac:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <PWM_Timer0_Start>

	break;
	}

}
     db0:	0f 90       	pop	r0
     db2:	0f 90       	pop	r0
     db4:	0f 90       	pop	r0
     db6:	0f 90       	pop	r0
     db8:	cf 91       	pop	r28
     dba:	df 91       	pop	r29
     dbc:	08 95       	ret

00000dbe <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
     dbe:	df 93       	push	r29
     dc0:	cf 93       	push	r28
     dc2:	00 d0       	rcall	.+0      	; 0xdc4 <EEPROM_writeByte+0x6>
     dc4:	00 d0       	rcall	.+0      	; 0xdc6 <EEPROM_writeByte+0x8>
     dc6:	cd b7       	in	r28, 0x3d	; 61
     dc8:	de b7       	in	r29, 0x3e	; 62
     dca:	9a 83       	std	Y+2, r25	; 0x02
     dcc:	89 83       	std	Y+1, r24	; 0x01
     dce:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     dd0:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <TWI_start>
    if (TWI_getStatus() != TWI_START)
     dd4:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <TWI_getStatus>
     dd8:	88 30       	cpi	r24, 0x08	; 8
     dda:	11 f0       	breq	.+4      	; 0xde0 <EEPROM_writeByte+0x22>
        return ERROR;
     ddc:	1c 82       	std	Y+4, r1	; 0x04
     dde:	28 c0       	rjmp	.+80     	; 0xe30 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
     de0:	89 81       	ldd	r24, Y+1	; 0x01
     de2:	9a 81       	ldd	r25, Y+2	; 0x02
     de4:	80 70       	andi	r24, 0x00	; 0
     de6:	97 70       	andi	r25, 0x07	; 7
     de8:	88 0f       	add	r24, r24
     dea:	89 2f       	mov	r24, r25
     dec:	88 1f       	adc	r24, r24
     dee:	99 0b       	sbc	r25, r25
     df0:	91 95       	neg	r25
     df2:	80 6a       	ori	r24, 0xA0	; 160
     df4:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     df8:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <TWI_getStatus>
     dfc:	88 31       	cpi	r24, 0x18	; 24
     dfe:	11 f0       	breq	.+4      	; 0xe04 <EEPROM_writeByte+0x46>
        return ERROR; 
     e00:	1c 82       	std	Y+4, r1	; 0x04
     e02:	16 c0       	rjmp	.+44     	; 0xe30 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     e04:	89 81       	ldd	r24, Y+1	; 0x01
     e06:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     e0a:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <TWI_getStatus>
     e0e:	88 32       	cpi	r24, 0x28	; 40
     e10:	11 f0       	breq	.+4      	; 0xe16 <EEPROM_writeByte+0x58>
        return ERROR;
     e12:	1c 82       	std	Y+4, r1	; 0x04
     e14:	0d c0       	rjmp	.+26     	; 0xe30 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
     e16:	8b 81       	ldd	r24, Y+3	; 0x03
     e18:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     e1c:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <TWI_getStatus>
     e20:	88 32       	cpi	r24, 0x28	; 40
     e22:	11 f0       	breq	.+4      	; 0xe28 <EEPROM_writeByte+0x6a>
        return ERROR;
     e24:	1c 82       	std	Y+4, r1	; 0x04
     e26:	04 c0       	rjmp	.+8      	; 0xe30 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
     e28:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <TWI_stop>
	
    return SUCCESS;
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	8c 83       	std	Y+4, r24	; 0x04
     e30:	8c 81       	ldd	r24, Y+4	; 0x04
}
     e32:	0f 90       	pop	r0
     e34:	0f 90       	pop	r0
     e36:	0f 90       	pop	r0
     e38:	0f 90       	pop	r0
     e3a:	cf 91       	pop	r28
     e3c:	df 91       	pop	r29
     e3e:	08 95       	ret

00000e40 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
     e40:	df 93       	push	r29
     e42:	cf 93       	push	r28
     e44:	00 d0       	rcall	.+0      	; 0xe46 <EEPROM_readByte+0x6>
     e46:	00 d0       	rcall	.+0      	; 0xe48 <EEPROM_readByte+0x8>
     e48:	0f 92       	push	r0
     e4a:	cd b7       	in	r28, 0x3d	; 61
     e4c:	de b7       	in	r29, 0x3e	; 62
     e4e:	9a 83       	std	Y+2, r25	; 0x02
     e50:	89 83       	std	Y+1, r24	; 0x01
     e52:	7c 83       	std	Y+4, r23	; 0x04
     e54:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     e56:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <TWI_start>
    if (TWI_getStatus() != TWI_START)
     e5a:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <TWI_getStatus>
     e5e:	88 30       	cpi	r24, 0x08	; 8
     e60:	11 f0       	breq	.+4      	; 0xe66 <EEPROM_readByte+0x26>
        return ERROR;
     e62:	1d 82       	std	Y+5, r1	; 0x05
     e64:	44 c0       	rjmp	.+136    	; 0xeee <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
     e66:	89 81       	ldd	r24, Y+1	; 0x01
     e68:	9a 81       	ldd	r25, Y+2	; 0x02
     e6a:	80 70       	andi	r24, 0x00	; 0
     e6c:	97 70       	andi	r25, 0x07	; 7
     e6e:	88 0f       	add	r24, r24
     e70:	89 2f       	mov	r24, r25
     e72:	88 1f       	adc	r24, r24
     e74:	99 0b       	sbc	r25, r25
     e76:	91 95       	neg	r25
     e78:	80 6a       	ori	r24, 0xA0	; 160
     e7a:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     e7e:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <TWI_getStatus>
     e82:	88 31       	cpi	r24, 0x18	; 24
     e84:	11 f0       	breq	.+4      	; 0xe8a <EEPROM_readByte+0x4a>
        return ERROR;
     e86:	1d 82       	std	Y+5, r1	; 0x05
     e88:	32 c0       	rjmp	.+100    	; 0xeee <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     e8a:	89 81       	ldd	r24, Y+1	; 0x01
     e8c:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     e90:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <TWI_getStatus>
     e94:	88 32       	cpi	r24, 0x28	; 40
     e96:	11 f0       	breq	.+4      	; 0xe9c <EEPROM_readByte+0x5c>
        return ERROR;
     e98:	1d 82       	std	Y+5, r1	; 0x05
     e9a:	29 c0       	rjmp	.+82     	; 0xeee <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
     e9c:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
     ea0:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <TWI_getStatus>
     ea4:	80 31       	cpi	r24, 0x10	; 16
     ea6:	11 f0       	breq	.+4      	; 0xeac <EEPROM_readByte+0x6c>
        return ERROR;
     ea8:	1d 82       	std	Y+5, r1	; 0x05
     eaa:	21 c0       	rjmp	.+66     	; 0xeee <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
     eac:	89 81       	ldd	r24, Y+1	; 0x01
     eae:	9a 81       	ldd	r25, Y+2	; 0x02
     eb0:	80 70       	andi	r24, 0x00	; 0
     eb2:	97 70       	andi	r25, 0x07	; 7
     eb4:	88 0f       	add	r24, r24
     eb6:	89 2f       	mov	r24, r25
     eb8:	88 1f       	adc	r24, r24
     eba:	99 0b       	sbc	r25, r25
     ebc:	91 95       	neg	r25
     ebe:	81 6a       	ori	r24, 0xA1	; 161
     ec0:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
     ec4:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <TWI_getStatus>
     ec8:	80 34       	cpi	r24, 0x40	; 64
     eca:	11 f0       	breq	.+4      	; 0xed0 <EEPROM_readByte+0x90>
        return ERROR;
     ecc:	1d 82       	std	Y+5, r1	; 0x05
     ece:	0f c0       	rjmp	.+30     	; 0xeee <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
     ed0:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <TWI_readByteWithNACK>
     ed4:	eb 81       	ldd	r30, Y+3	; 0x03
     ed6:	fc 81       	ldd	r31, Y+4	; 0x04
     ed8:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
     eda:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <TWI_getStatus>
     ede:	88 35       	cpi	r24, 0x58	; 88
     ee0:	11 f0       	breq	.+4      	; 0xee6 <EEPROM_readByte+0xa6>
        return ERROR;
     ee2:	1d 82       	std	Y+5, r1	; 0x05
     ee4:	04 c0       	rjmp	.+8      	; 0xeee <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
     ee6:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <TWI_stop>

    return SUCCESS;
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	8d 83       	std	Y+5, r24	; 0x05
     eee:	8d 81       	ldd	r24, Y+5	; 0x05
}
     ef0:	0f 90       	pop	r0
     ef2:	0f 90       	pop	r0
     ef4:	0f 90       	pop	r0
     ef6:	0f 90       	pop	r0
     ef8:	0f 90       	pop	r0
     efa:	cf 91       	pop	r28
     efc:	df 91       	pop	r29
     efe:	08 95       	ret

00000f00 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     f00:	df 93       	push	r29
     f02:	cf 93       	push	r28
     f04:	00 d0       	rcall	.+0      	; 0xf06 <GPIO_setupPinDirection+0x6>
     f06:	00 d0       	rcall	.+0      	; 0xf08 <GPIO_setupPinDirection+0x8>
     f08:	0f 92       	push	r0
     f0a:	cd b7       	in	r28, 0x3d	; 61
     f0c:	de b7       	in	r29, 0x3e	; 62
     f0e:	89 83       	std	Y+1, r24	; 0x01
     f10:	6a 83       	std	Y+2, r22	; 0x02
     f12:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f14:	8a 81       	ldd	r24, Y+2	; 0x02
     f16:	88 30       	cpi	r24, 0x08	; 8
     f18:	08 f0       	brcs	.+2      	; 0xf1c <GPIO_setupPinDirection+0x1c>
     f1a:	d5 c0       	rjmp	.+426    	; 0x10c6 <GPIO_setupPinDirection+0x1c6>
     f1c:	89 81       	ldd	r24, Y+1	; 0x01
     f1e:	84 30       	cpi	r24, 0x04	; 4
     f20:	08 f0       	brcs	.+2      	; 0xf24 <GPIO_setupPinDirection+0x24>
     f22:	d1 c0       	rjmp	.+418    	; 0x10c6 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     f24:	89 81       	ldd	r24, Y+1	; 0x01
     f26:	28 2f       	mov	r18, r24
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	3d 83       	std	Y+5, r19	; 0x05
     f2c:	2c 83       	std	Y+4, r18	; 0x04
     f2e:	8c 81       	ldd	r24, Y+4	; 0x04
     f30:	9d 81       	ldd	r25, Y+5	; 0x05
     f32:	81 30       	cpi	r24, 0x01	; 1
     f34:	91 05       	cpc	r25, r1
     f36:	09 f4       	brne	.+2      	; 0xf3a <GPIO_setupPinDirection+0x3a>
     f38:	43 c0       	rjmp	.+134    	; 0xfc0 <GPIO_setupPinDirection+0xc0>
     f3a:	2c 81       	ldd	r18, Y+4	; 0x04
     f3c:	3d 81       	ldd	r19, Y+5	; 0x05
     f3e:	22 30       	cpi	r18, 0x02	; 2
     f40:	31 05       	cpc	r19, r1
     f42:	2c f4       	brge	.+10     	; 0xf4e <GPIO_setupPinDirection+0x4e>
     f44:	8c 81       	ldd	r24, Y+4	; 0x04
     f46:	9d 81       	ldd	r25, Y+5	; 0x05
     f48:	00 97       	sbiw	r24, 0x00	; 0
     f4a:	71 f0       	breq	.+28     	; 0xf68 <GPIO_setupPinDirection+0x68>
     f4c:	bc c0       	rjmp	.+376    	; 0x10c6 <GPIO_setupPinDirection+0x1c6>
     f4e:	2c 81       	ldd	r18, Y+4	; 0x04
     f50:	3d 81       	ldd	r19, Y+5	; 0x05
     f52:	22 30       	cpi	r18, 0x02	; 2
     f54:	31 05       	cpc	r19, r1
     f56:	09 f4       	brne	.+2      	; 0xf5a <GPIO_setupPinDirection+0x5a>
     f58:	5f c0       	rjmp	.+190    	; 0x1018 <GPIO_setupPinDirection+0x118>
     f5a:	8c 81       	ldd	r24, Y+4	; 0x04
     f5c:	9d 81       	ldd	r25, Y+5	; 0x05
     f5e:	83 30       	cpi	r24, 0x03	; 3
     f60:	91 05       	cpc	r25, r1
     f62:	09 f4       	brne	.+2      	; 0xf66 <GPIO_setupPinDirection+0x66>
     f64:	85 c0       	rjmp	.+266    	; 0x1070 <GPIO_setupPinDirection+0x170>
     f66:	af c0       	rjmp	.+350    	; 0x10c6 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     f68:	8b 81       	ldd	r24, Y+3	; 0x03
     f6a:	81 30       	cpi	r24, 0x01	; 1
     f6c:	a1 f4       	brne	.+40     	; 0xf96 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     f6e:	aa e3       	ldi	r26, 0x3A	; 58
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	ea e3       	ldi	r30, 0x3A	; 58
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	48 2f       	mov	r20, r24
     f7a:	8a 81       	ldd	r24, Y+2	; 0x02
     f7c:	28 2f       	mov	r18, r24
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	02 2e       	mov	r0, r18
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <GPIO_setupPinDirection+0x8c>
     f88:	88 0f       	add	r24, r24
     f8a:	99 1f       	adc	r25, r25
     f8c:	0a 94       	dec	r0
     f8e:	e2 f7       	brpl	.-8      	; 0xf88 <GPIO_setupPinDirection+0x88>
     f90:	84 2b       	or	r24, r20
     f92:	8c 93       	st	X, r24
     f94:	98 c0       	rjmp	.+304    	; 0x10c6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     f96:	aa e3       	ldi	r26, 0x3A	; 58
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	ea e3       	ldi	r30, 0x3A	; 58
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	48 2f       	mov	r20, r24
     fa2:	8a 81       	ldd	r24, Y+2	; 0x02
     fa4:	28 2f       	mov	r18, r24
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	02 2e       	mov	r0, r18
     fae:	02 c0       	rjmp	.+4      	; 0xfb4 <GPIO_setupPinDirection+0xb4>
     fb0:	88 0f       	add	r24, r24
     fb2:	99 1f       	adc	r25, r25
     fb4:	0a 94       	dec	r0
     fb6:	e2 f7       	brpl	.-8      	; 0xfb0 <GPIO_setupPinDirection+0xb0>
     fb8:	80 95       	com	r24
     fba:	84 23       	and	r24, r20
     fbc:	8c 93       	st	X, r24
     fbe:	83 c0       	rjmp	.+262    	; 0x10c6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     fc0:	8b 81       	ldd	r24, Y+3	; 0x03
     fc2:	81 30       	cpi	r24, 0x01	; 1
     fc4:	a1 f4       	brne	.+40     	; 0xfee <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     fc6:	a7 e3       	ldi	r26, 0x37	; 55
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	e7 e3       	ldi	r30, 0x37	; 55
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	48 2f       	mov	r20, r24
     fd2:	8a 81       	ldd	r24, Y+2	; 0x02
     fd4:	28 2f       	mov	r18, r24
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	02 2e       	mov	r0, r18
     fde:	02 c0       	rjmp	.+4      	; 0xfe4 <GPIO_setupPinDirection+0xe4>
     fe0:	88 0f       	add	r24, r24
     fe2:	99 1f       	adc	r25, r25
     fe4:	0a 94       	dec	r0
     fe6:	e2 f7       	brpl	.-8      	; 0xfe0 <GPIO_setupPinDirection+0xe0>
     fe8:	84 2b       	or	r24, r20
     fea:	8c 93       	st	X, r24
     fec:	6c c0       	rjmp	.+216    	; 0x10c6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     fee:	a7 e3       	ldi	r26, 0x37	; 55
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	e7 e3       	ldi	r30, 0x37	; 55
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	48 2f       	mov	r20, r24
     ffa:	8a 81       	ldd	r24, Y+2	; 0x02
     ffc:	28 2f       	mov	r18, r24
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	02 2e       	mov	r0, r18
    1006:	02 c0       	rjmp	.+4      	; 0x100c <GPIO_setupPinDirection+0x10c>
    1008:	88 0f       	add	r24, r24
    100a:	99 1f       	adc	r25, r25
    100c:	0a 94       	dec	r0
    100e:	e2 f7       	brpl	.-8      	; 0x1008 <GPIO_setupPinDirection+0x108>
    1010:	80 95       	com	r24
    1012:	84 23       	and	r24, r20
    1014:	8c 93       	st	X, r24
    1016:	57 c0       	rjmp	.+174    	; 0x10c6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1018:	8b 81       	ldd	r24, Y+3	; 0x03
    101a:	81 30       	cpi	r24, 0x01	; 1
    101c:	a1 f4       	brne	.+40     	; 0x1046 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    101e:	a4 e3       	ldi	r26, 0x34	; 52
    1020:	b0 e0       	ldi	r27, 0x00	; 0
    1022:	e4 e3       	ldi	r30, 0x34	; 52
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	80 81       	ld	r24, Z
    1028:	48 2f       	mov	r20, r24
    102a:	8a 81       	ldd	r24, Y+2	; 0x02
    102c:	28 2f       	mov	r18, r24
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	02 2e       	mov	r0, r18
    1036:	02 c0       	rjmp	.+4      	; 0x103c <GPIO_setupPinDirection+0x13c>
    1038:	88 0f       	add	r24, r24
    103a:	99 1f       	adc	r25, r25
    103c:	0a 94       	dec	r0
    103e:	e2 f7       	brpl	.-8      	; 0x1038 <GPIO_setupPinDirection+0x138>
    1040:	84 2b       	or	r24, r20
    1042:	8c 93       	st	X, r24
    1044:	40 c0       	rjmp	.+128    	; 0x10c6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1046:	a4 e3       	ldi	r26, 0x34	; 52
    1048:	b0 e0       	ldi	r27, 0x00	; 0
    104a:	e4 e3       	ldi	r30, 0x34	; 52
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	80 81       	ld	r24, Z
    1050:	48 2f       	mov	r20, r24
    1052:	8a 81       	ldd	r24, Y+2	; 0x02
    1054:	28 2f       	mov	r18, r24
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	02 2e       	mov	r0, r18
    105e:	02 c0       	rjmp	.+4      	; 0x1064 <GPIO_setupPinDirection+0x164>
    1060:	88 0f       	add	r24, r24
    1062:	99 1f       	adc	r25, r25
    1064:	0a 94       	dec	r0
    1066:	e2 f7       	brpl	.-8      	; 0x1060 <GPIO_setupPinDirection+0x160>
    1068:	80 95       	com	r24
    106a:	84 23       	and	r24, r20
    106c:	8c 93       	st	X, r24
    106e:	2b c0       	rjmp	.+86     	; 0x10c6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	81 30       	cpi	r24, 0x01	; 1
    1074:	a1 f4       	brne	.+40     	; 0x109e <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1076:	a1 e3       	ldi	r26, 0x31	; 49
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	e1 e3       	ldi	r30, 0x31	; 49
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z
    1080:	48 2f       	mov	r20, r24
    1082:	8a 81       	ldd	r24, Y+2	; 0x02
    1084:	28 2f       	mov	r18, r24
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	02 2e       	mov	r0, r18
    108e:	02 c0       	rjmp	.+4      	; 0x1094 <GPIO_setupPinDirection+0x194>
    1090:	88 0f       	add	r24, r24
    1092:	99 1f       	adc	r25, r25
    1094:	0a 94       	dec	r0
    1096:	e2 f7       	brpl	.-8      	; 0x1090 <GPIO_setupPinDirection+0x190>
    1098:	84 2b       	or	r24, r20
    109a:	8c 93       	st	X, r24
    109c:	14 c0       	rjmp	.+40     	; 0x10c6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    109e:	a1 e3       	ldi	r26, 0x31	; 49
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	e1 e3       	ldi	r30, 0x31	; 49
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	48 2f       	mov	r20, r24
    10aa:	8a 81       	ldd	r24, Y+2	; 0x02
    10ac:	28 2f       	mov	r18, r24
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	02 2e       	mov	r0, r18
    10b6:	02 c0       	rjmp	.+4      	; 0x10bc <GPIO_setupPinDirection+0x1bc>
    10b8:	88 0f       	add	r24, r24
    10ba:	99 1f       	adc	r25, r25
    10bc:	0a 94       	dec	r0
    10be:	e2 f7       	brpl	.-8      	; 0x10b8 <GPIO_setupPinDirection+0x1b8>
    10c0:	80 95       	com	r24
    10c2:	84 23       	and	r24, r20
    10c4:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    10c6:	0f 90       	pop	r0
    10c8:	0f 90       	pop	r0
    10ca:	0f 90       	pop	r0
    10cc:	0f 90       	pop	r0
    10ce:	0f 90       	pop	r0
    10d0:	cf 91       	pop	r28
    10d2:	df 91       	pop	r29
    10d4:	08 95       	ret

000010d6 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    10d6:	df 93       	push	r29
    10d8:	cf 93       	push	r28
    10da:	00 d0       	rcall	.+0      	; 0x10dc <GPIO_writePin+0x6>
    10dc:	00 d0       	rcall	.+0      	; 0x10de <GPIO_writePin+0x8>
    10de:	0f 92       	push	r0
    10e0:	cd b7       	in	r28, 0x3d	; 61
    10e2:	de b7       	in	r29, 0x3e	; 62
    10e4:	89 83       	std	Y+1, r24	; 0x01
    10e6:	6a 83       	std	Y+2, r22	; 0x02
    10e8:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    10ea:	8a 81       	ldd	r24, Y+2	; 0x02
    10ec:	88 30       	cpi	r24, 0x08	; 8
    10ee:	08 f0       	brcs	.+2      	; 0x10f2 <GPIO_writePin+0x1c>
    10f0:	d5 c0       	rjmp	.+426    	; 0x129c <GPIO_writePin+0x1c6>
    10f2:	89 81       	ldd	r24, Y+1	; 0x01
    10f4:	84 30       	cpi	r24, 0x04	; 4
    10f6:	08 f0       	brcs	.+2      	; 0x10fa <GPIO_writePin+0x24>
    10f8:	d1 c0       	rjmp	.+418    	; 0x129c <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    10fa:	89 81       	ldd	r24, Y+1	; 0x01
    10fc:	28 2f       	mov	r18, r24
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	3d 83       	std	Y+5, r19	; 0x05
    1102:	2c 83       	std	Y+4, r18	; 0x04
    1104:	8c 81       	ldd	r24, Y+4	; 0x04
    1106:	9d 81       	ldd	r25, Y+5	; 0x05
    1108:	81 30       	cpi	r24, 0x01	; 1
    110a:	91 05       	cpc	r25, r1
    110c:	09 f4       	brne	.+2      	; 0x1110 <GPIO_writePin+0x3a>
    110e:	43 c0       	rjmp	.+134    	; 0x1196 <GPIO_writePin+0xc0>
    1110:	2c 81       	ldd	r18, Y+4	; 0x04
    1112:	3d 81       	ldd	r19, Y+5	; 0x05
    1114:	22 30       	cpi	r18, 0x02	; 2
    1116:	31 05       	cpc	r19, r1
    1118:	2c f4       	brge	.+10     	; 0x1124 <GPIO_writePin+0x4e>
    111a:	8c 81       	ldd	r24, Y+4	; 0x04
    111c:	9d 81       	ldd	r25, Y+5	; 0x05
    111e:	00 97       	sbiw	r24, 0x00	; 0
    1120:	71 f0       	breq	.+28     	; 0x113e <GPIO_writePin+0x68>
    1122:	bc c0       	rjmp	.+376    	; 0x129c <GPIO_writePin+0x1c6>
    1124:	2c 81       	ldd	r18, Y+4	; 0x04
    1126:	3d 81       	ldd	r19, Y+5	; 0x05
    1128:	22 30       	cpi	r18, 0x02	; 2
    112a:	31 05       	cpc	r19, r1
    112c:	09 f4       	brne	.+2      	; 0x1130 <GPIO_writePin+0x5a>
    112e:	5f c0       	rjmp	.+190    	; 0x11ee <GPIO_writePin+0x118>
    1130:	8c 81       	ldd	r24, Y+4	; 0x04
    1132:	9d 81       	ldd	r25, Y+5	; 0x05
    1134:	83 30       	cpi	r24, 0x03	; 3
    1136:	91 05       	cpc	r25, r1
    1138:	09 f4       	brne	.+2      	; 0x113c <GPIO_writePin+0x66>
    113a:	85 c0       	rjmp	.+266    	; 0x1246 <GPIO_writePin+0x170>
    113c:	af c0       	rjmp	.+350    	; 0x129c <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    113e:	8b 81       	ldd	r24, Y+3	; 0x03
    1140:	81 30       	cpi	r24, 0x01	; 1
    1142:	a1 f4       	brne	.+40     	; 0x116c <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1144:	ab e3       	ldi	r26, 0x3B	; 59
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	eb e3       	ldi	r30, 0x3B	; 59
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	48 2f       	mov	r20, r24
    1150:	8a 81       	ldd	r24, Y+2	; 0x02
    1152:	28 2f       	mov	r18, r24
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	02 2e       	mov	r0, r18
    115c:	02 c0       	rjmp	.+4      	; 0x1162 <GPIO_writePin+0x8c>
    115e:	88 0f       	add	r24, r24
    1160:	99 1f       	adc	r25, r25
    1162:	0a 94       	dec	r0
    1164:	e2 f7       	brpl	.-8      	; 0x115e <GPIO_writePin+0x88>
    1166:	84 2b       	or	r24, r20
    1168:	8c 93       	st	X, r24
    116a:	98 c0       	rjmp	.+304    	; 0x129c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    116c:	ab e3       	ldi	r26, 0x3B	; 59
    116e:	b0 e0       	ldi	r27, 0x00	; 0
    1170:	eb e3       	ldi	r30, 0x3B	; 59
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	80 81       	ld	r24, Z
    1176:	48 2f       	mov	r20, r24
    1178:	8a 81       	ldd	r24, Y+2	; 0x02
    117a:	28 2f       	mov	r18, r24
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	02 2e       	mov	r0, r18
    1184:	02 c0       	rjmp	.+4      	; 0x118a <GPIO_writePin+0xb4>
    1186:	88 0f       	add	r24, r24
    1188:	99 1f       	adc	r25, r25
    118a:	0a 94       	dec	r0
    118c:	e2 f7       	brpl	.-8      	; 0x1186 <GPIO_writePin+0xb0>
    118e:	80 95       	com	r24
    1190:	84 23       	and	r24, r20
    1192:	8c 93       	st	X, r24
    1194:	83 c0       	rjmp	.+262    	; 0x129c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1196:	8b 81       	ldd	r24, Y+3	; 0x03
    1198:	81 30       	cpi	r24, 0x01	; 1
    119a:	a1 f4       	brne	.+40     	; 0x11c4 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    119c:	a8 e3       	ldi	r26, 0x38	; 56
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	e8 e3       	ldi	r30, 0x38	; 56
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	48 2f       	mov	r20, r24
    11a8:	8a 81       	ldd	r24, Y+2	; 0x02
    11aa:	28 2f       	mov	r18, r24
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	02 2e       	mov	r0, r18
    11b4:	02 c0       	rjmp	.+4      	; 0x11ba <GPIO_writePin+0xe4>
    11b6:	88 0f       	add	r24, r24
    11b8:	99 1f       	adc	r25, r25
    11ba:	0a 94       	dec	r0
    11bc:	e2 f7       	brpl	.-8      	; 0x11b6 <GPIO_writePin+0xe0>
    11be:	84 2b       	or	r24, r20
    11c0:	8c 93       	st	X, r24
    11c2:	6c c0       	rjmp	.+216    	; 0x129c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    11c4:	a8 e3       	ldi	r26, 0x38	; 56
    11c6:	b0 e0       	ldi	r27, 0x00	; 0
    11c8:	e8 e3       	ldi	r30, 0x38	; 56
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	80 81       	ld	r24, Z
    11ce:	48 2f       	mov	r20, r24
    11d0:	8a 81       	ldd	r24, Y+2	; 0x02
    11d2:	28 2f       	mov	r18, r24
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	02 2e       	mov	r0, r18
    11dc:	02 c0       	rjmp	.+4      	; 0x11e2 <GPIO_writePin+0x10c>
    11de:	88 0f       	add	r24, r24
    11e0:	99 1f       	adc	r25, r25
    11e2:	0a 94       	dec	r0
    11e4:	e2 f7       	brpl	.-8      	; 0x11de <GPIO_writePin+0x108>
    11e6:	80 95       	com	r24
    11e8:	84 23       	and	r24, r20
    11ea:	8c 93       	st	X, r24
    11ec:	57 c0       	rjmp	.+174    	; 0x129c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    11ee:	8b 81       	ldd	r24, Y+3	; 0x03
    11f0:	81 30       	cpi	r24, 0x01	; 1
    11f2:	a1 f4       	brne	.+40     	; 0x121c <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    11f4:	a5 e3       	ldi	r26, 0x35	; 53
    11f6:	b0 e0       	ldi	r27, 0x00	; 0
    11f8:	e5 e3       	ldi	r30, 0x35	; 53
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	48 2f       	mov	r20, r24
    1200:	8a 81       	ldd	r24, Y+2	; 0x02
    1202:	28 2f       	mov	r18, r24
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	02 2e       	mov	r0, r18
    120c:	02 c0       	rjmp	.+4      	; 0x1212 <GPIO_writePin+0x13c>
    120e:	88 0f       	add	r24, r24
    1210:	99 1f       	adc	r25, r25
    1212:	0a 94       	dec	r0
    1214:	e2 f7       	brpl	.-8      	; 0x120e <GPIO_writePin+0x138>
    1216:	84 2b       	or	r24, r20
    1218:	8c 93       	st	X, r24
    121a:	40 c0       	rjmp	.+128    	; 0x129c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    121c:	a5 e3       	ldi	r26, 0x35	; 53
    121e:	b0 e0       	ldi	r27, 0x00	; 0
    1220:	e5 e3       	ldi	r30, 0x35	; 53
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	80 81       	ld	r24, Z
    1226:	48 2f       	mov	r20, r24
    1228:	8a 81       	ldd	r24, Y+2	; 0x02
    122a:	28 2f       	mov	r18, r24
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	02 2e       	mov	r0, r18
    1234:	02 c0       	rjmp	.+4      	; 0x123a <GPIO_writePin+0x164>
    1236:	88 0f       	add	r24, r24
    1238:	99 1f       	adc	r25, r25
    123a:	0a 94       	dec	r0
    123c:	e2 f7       	brpl	.-8      	; 0x1236 <GPIO_writePin+0x160>
    123e:	80 95       	com	r24
    1240:	84 23       	and	r24, r20
    1242:	8c 93       	st	X, r24
    1244:	2b c0       	rjmp	.+86     	; 0x129c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1246:	8b 81       	ldd	r24, Y+3	; 0x03
    1248:	81 30       	cpi	r24, 0x01	; 1
    124a:	a1 f4       	brne	.+40     	; 0x1274 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    124c:	a2 e3       	ldi	r26, 0x32	; 50
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	e2 e3       	ldi	r30, 0x32	; 50
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	48 2f       	mov	r20, r24
    1258:	8a 81       	ldd	r24, Y+2	; 0x02
    125a:	28 2f       	mov	r18, r24
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	81 e0       	ldi	r24, 0x01	; 1
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	02 2e       	mov	r0, r18
    1264:	02 c0       	rjmp	.+4      	; 0x126a <GPIO_writePin+0x194>
    1266:	88 0f       	add	r24, r24
    1268:	99 1f       	adc	r25, r25
    126a:	0a 94       	dec	r0
    126c:	e2 f7       	brpl	.-8      	; 0x1266 <GPIO_writePin+0x190>
    126e:	84 2b       	or	r24, r20
    1270:	8c 93       	st	X, r24
    1272:	14 c0       	rjmp	.+40     	; 0x129c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1274:	a2 e3       	ldi	r26, 0x32	; 50
    1276:	b0 e0       	ldi	r27, 0x00	; 0
    1278:	e2 e3       	ldi	r30, 0x32	; 50
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 81       	ld	r24, Z
    127e:	48 2f       	mov	r20, r24
    1280:	8a 81       	ldd	r24, Y+2	; 0x02
    1282:	28 2f       	mov	r18, r24
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	02 2e       	mov	r0, r18
    128c:	02 c0       	rjmp	.+4      	; 0x1292 <GPIO_writePin+0x1bc>
    128e:	88 0f       	add	r24, r24
    1290:	99 1f       	adc	r25, r25
    1292:	0a 94       	dec	r0
    1294:	e2 f7       	brpl	.-8      	; 0x128e <GPIO_writePin+0x1b8>
    1296:	80 95       	com	r24
    1298:	84 23       	and	r24, r20
    129a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    129c:	0f 90       	pop	r0
    129e:	0f 90       	pop	r0
    12a0:	0f 90       	pop	r0
    12a2:	0f 90       	pop	r0
    12a4:	0f 90       	pop	r0
    12a6:	cf 91       	pop	r28
    12a8:	df 91       	pop	r29
    12aa:	08 95       	ret

000012ac <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    12ac:	df 93       	push	r29
    12ae:	cf 93       	push	r28
    12b0:	00 d0       	rcall	.+0      	; 0x12b2 <GPIO_readPin+0x6>
    12b2:	00 d0       	rcall	.+0      	; 0x12b4 <GPIO_readPin+0x8>
    12b4:	0f 92       	push	r0
    12b6:	cd b7       	in	r28, 0x3d	; 61
    12b8:	de b7       	in	r29, 0x3e	; 62
    12ba:	8a 83       	std	Y+2, r24	; 0x02
    12bc:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    12be:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    12c0:	8b 81       	ldd	r24, Y+3	; 0x03
    12c2:	88 30       	cpi	r24, 0x08	; 8
    12c4:	08 f0       	brcs	.+2      	; 0x12c8 <GPIO_readPin+0x1c>
    12c6:	84 c0       	rjmp	.+264    	; 0x13d0 <GPIO_readPin+0x124>
    12c8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ca:	84 30       	cpi	r24, 0x04	; 4
    12cc:	08 f0       	brcs	.+2      	; 0x12d0 <GPIO_readPin+0x24>
    12ce:	80 c0       	rjmp	.+256    	; 0x13d0 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    12d0:	8a 81       	ldd	r24, Y+2	; 0x02
    12d2:	28 2f       	mov	r18, r24
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	3d 83       	std	Y+5, r19	; 0x05
    12d8:	2c 83       	std	Y+4, r18	; 0x04
    12da:	4c 81       	ldd	r20, Y+4	; 0x04
    12dc:	5d 81       	ldd	r21, Y+5	; 0x05
    12de:	41 30       	cpi	r20, 0x01	; 1
    12e0:	51 05       	cpc	r21, r1
    12e2:	79 f1       	breq	.+94     	; 0x1342 <GPIO_readPin+0x96>
    12e4:	8c 81       	ldd	r24, Y+4	; 0x04
    12e6:	9d 81       	ldd	r25, Y+5	; 0x05
    12e8:	82 30       	cpi	r24, 0x02	; 2
    12ea:	91 05       	cpc	r25, r1
    12ec:	34 f4       	brge	.+12     	; 0x12fa <GPIO_readPin+0x4e>
    12ee:	2c 81       	ldd	r18, Y+4	; 0x04
    12f0:	3d 81       	ldd	r19, Y+5	; 0x05
    12f2:	21 15       	cp	r18, r1
    12f4:	31 05       	cpc	r19, r1
    12f6:	69 f0       	breq	.+26     	; 0x1312 <GPIO_readPin+0x66>
    12f8:	6b c0       	rjmp	.+214    	; 0x13d0 <GPIO_readPin+0x124>
    12fa:	4c 81       	ldd	r20, Y+4	; 0x04
    12fc:	5d 81       	ldd	r21, Y+5	; 0x05
    12fe:	42 30       	cpi	r20, 0x02	; 2
    1300:	51 05       	cpc	r21, r1
    1302:	b9 f1       	breq	.+110    	; 0x1372 <GPIO_readPin+0xc6>
    1304:	8c 81       	ldd	r24, Y+4	; 0x04
    1306:	9d 81       	ldd	r25, Y+5	; 0x05
    1308:	83 30       	cpi	r24, 0x03	; 3
    130a:	91 05       	cpc	r25, r1
    130c:	09 f4       	brne	.+2      	; 0x1310 <GPIO_readPin+0x64>
    130e:	49 c0       	rjmp	.+146    	; 0x13a2 <GPIO_readPin+0xf6>
    1310:	5f c0       	rjmp	.+190    	; 0x13d0 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1312:	e9 e3       	ldi	r30, 0x39	; 57
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	28 2f       	mov	r18, r24
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	8b 81       	ldd	r24, Y+3	; 0x03
    131e:	88 2f       	mov	r24, r24
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	a9 01       	movw	r20, r18
    1324:	02 c0       	rjmp	.+4      	; 0x132a <GPIO_readPin+0x7e>
    1326:	55 95       	asr	r21
    1328:	47 95       	ror	r20
    132a:	8a 95       	dec	r24
    132c:	e2 f7       	brpl	.-8      	; 0x1326 <GPIO_readPin+0x7a>
    132e:	ca 01       	movw	r24, r20
    1330:	81 70       	andi	r24, 0x01	; 1
    1332:	90 70       	andi	r25, 0x00	; 0
    1334:	88 23       	and	r24, r24
    1336:	19 f0       	breq	.+6      	; 0x133e <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	89 83       	std	Y+1, r24	; 0x01
    133c:	49 c0       	rjmp	.+146    	; 0x13d0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    133e:	19 82       	std	Y+1, r1	; 0x01
    1340:	47 c0       	rjmp	.+142    	; 0x13d0 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1342:	e6 e3       	ldi	r30, 0x36	; 54
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	80 81       	ld	r24, Z
    1348:	28 2f       	mov	r18, r24
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	8b 81       	ldd	r24, Y+3	; 0x03
    134e:	88 2f       	mov	r24, r24
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	a9 01       	movw	r20, r18
    1354:	02 c0       	rjmp	.+4      	; 0x135a <GPIO_readPin+0xae>
    1356:	55 95       	asr	r21
    1358:	47 95       	ror	r20
    135a:	8a 95       	dec	r24
    135c:	e2 f7       	brpl	.-8      	; 0x1356 <GPIO_readPin+0xaa>
    135e:	ca 01       	movw	r24, r20
    1360:	81 70       	andi	r24, 0x01	; 1
    1362:	90 70       	andi	r25, 0x00	; 0
    1364:	88 23       	and	r24, r24
    1366:	19 f0       	breq	.+6      	; 0x136e <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	89 83       	std	Y+1, r24	; 0x01
    136c:	31 c0       	rjmp	.+98     	; 0x13d0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    136e:	19 82       	std	Y+1, r1	; 0x01
    1370:	2f c0       	rjmp	.+94     	; 0x13d0 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1372:	e3 e3       	ldi	r30, 0x33	; 51
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	80 81       	ld	r24, Z
    1378:	28 2f       	mov	r18, r24
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	8b 81       	ldd	r24, Y+3	; 0x03
    137e:	88 2f       	mov	r24, r24
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	a9 01       	movw	r20, r18
    1384:	02 c0       	rjmp	.+4      	; 0x138a <GPIO_readPin+0xde>
    1386:	55 95       	asr	r21
    1388:	47 95       	ror	r20
    138a:	8a 95       	dec	r24
    138c:	e2 f7       	brpl	.-8      	; 0x1386 <GPIO_readPin+0xda>
    138e:	ca 01       	movw	r24, r20
    1390:	81 70       	andi	r24, 0x01	; 1
    1392:	90 70       	andi	r25, 0x00	; 0
    1394:	88 23       	and	r24, r24
    1396:	19 f0       	breq	.+6      	; 0x139e <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	89 83       	std	Y+1, r24	; 0x01
    139c:	19 c0       	rjmp	.+50     	; 0x13d0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    139e:	19 82       	std	Y+1, r1	; 0x01
    13a0:	17 c0       	rjmp	.+46     	; 0x13d0 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    13a2:	e0 e3       	ldi	r30, 0x30	; 48
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	80 81       	ld	r24, Z
    13a8:	28 2f       	mov	r18, r24
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	8b 81       	ldd	r24, Y+3	; 0x03
    13ae:	88 2f       	mov	r24, r24
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	a9 01       	movw	r20, r18
    13b4:	02 c0       	rjmp	.+4      	; 0x13ba <GPIO_readPin+0x10e>
    13b6:	55 95       	asr	r21
    13b8:	47 95       	ror	r20
    13ba:	8a 95       	dec	r24
    13bc:	e2 f7       	brpl	.-8      	; 0x13b6 <GPIO_readPin+0x10a>
    13be:	ca 01       	movw	r24, r20
    13c0:	81 70       	andi	r24, 0x01	; 1
    13c2:	90 70       	andi	r25, 0x00	; 0
    13c4:	88 23       	and	r24, r24
    13c6:	19 f0       	breq	.+6      	; 0x13ce <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    13c8:	81 e0       	ldi	r24, 0x01	; 1
    13ca:	89 83       	std	Y+1, r24	; 0x01
    13cc:	01 c0       	rjmp	.+2      	; 0x13d0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    13ce:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    13d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    13d2:	0f 90       	pop	r0
    13d4:	0f 90       	pop	r0
    13d6:	0f 90       	pop	r0
    13d8:	0f 90       	pop	r0
    13da:	0f 90       	pop	r0
    13dc:	cf 91       	pop	r28
    13de:	df 91       	pop	r29
    13e0:	08 95       	ret

000013e2 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    13e2:	df 93       	push	r29
    13e4:	cf 93       	push	r28
    13e6:	00 d0       	rcall	.+0      	; 0x13e8 <GPIO_setupPortDirection+0x6>
    13e8:	00 d0       	rcall	.+0      	; 0x13ea <GPIO_setupPortDirection+0x8>
    13ea:	cd b7       	in	r28, 0x3d	; 61
    13ec:	de b7       	in	r29, 0x3e	; 62
    13ee:	89 83       	std	Y+1, r24	; 0x01
    13f0:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    13f2:	89 81       	ldd	r24, Y+1	; 0x01
    13f4:	84 30       	cpi	r24, 0x04	; 4
    13f6:	90 f5       	brcc	.+100    	; 0x145c <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    13f8:	89 81       	ldd	r24, Y+1	; 0x01
    13fa:	28 2f       	mov	r18, r24
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	3c 83       	std	Y+4, r19	; 0x04
    1400:	2b 83       	std	Y+3, r18	; 0x03
    1402:	8b 81       	ldd	r24, Y+3	; 0x03
    1404:	9c 81       	ldd	r25, Y+4	; 0x04
    1406:	81 30       	cpi	r24, 0x01	; 1
    1408:	91 05       	cpc	r25, r1
    140a:	d1 f0       	breq	.+52     	; 0x1440 <GPIO_setupPortDirection+0x5e>
    140c:	2b 81       	ldd	r18, Y+3	; 0x03
    140e:	3c 81       	ldd	r19, Y+4	; 0x04
    1410:	22 30       	cpi	r18, 0x02	; 2
    1412:	31 05       	cpc	r19, r1
    1414:	2c f4       	brge	.+10     	; 0x1420 <GPIO_setupPortDirection+0x3e>
    1416:	8b 81       	ldd	r24, Y+3	; 0x03
    1418:	9c 81       	ldd	r25, Y+4	; 0x04
    141a:	00 97       	sbiw	r24, 0x00	; 0
    141c:	61 f0       	breq	.+24     	; 0x1436 <GPIO_setupPortDirection+0x54>
    141e:	1e c0       	rjmp	.+60     	; 0x145c <GPIO_setupPortDirection+0x7a>
    1420:	2b 81       	ldd	r18, Y+3	; 0x03
    1422:	3c 81       	ldd	r19, Y+4	; 0x04
    1424:	22 30       	cpi	r18, 0x02	; 2
    1426:	31 05       	cpc	r19, r1
    1428:	81 f0       	breq	.+32     	; 0x144a <GPIO_setupPortDirection+0x68>
    142a:	8b 81       	ldd	r24, Y+3	; 0x03
    142c:	9c 81       	ldd	r25, Y+4	; 0x04
    142e:	83 30       	cpi	r24, 0x03	; 3
    1430:	91 05       	cpc	r25, r1
    1432:	81 f0       	breq	.+32     	; 0x1454 <GPIO_setupPortDirection+0x72>
    1434:	13 c0       	rjmp	.+38     	; 0x145c <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1436:	ea e3       	ldi	r30, 0x3A	; 58
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	8a 81       	ldd	r24, Y+2	; 0x02
    143c:	80 83       	st	Z, r24
    143e:	0e c0       	rjmp	.+28     	; 0x145c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1440:	e7 e3       	ldi	r30, 0x37	; 55
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	8a 81       	ldd	r24, Y+2	; 0x02
    1446:	80 83       	st	Z, r24
    1448:	09 c0       	rjmp	.+18     	; 0x145c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    144a:	e4 e3       	ldi	r30, 0x34	; 52
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	8a 81       	ldd	r24, Y+2	; 0x02
    1450:	80 83       	st	Z, r24
    1452:	04 c0       	rjmp	.+8      	; 0x145c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1454:	e1 e3       	ldi	r30, 0x31	; 49
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	8a 81       	ldd	r24, Y+2	; 0x02
    145a:	80 83       	st	Z, r24
			break;
		}
	}
}
    145c:	0f 90       	pop	r0
    145e:	0f 90       	pop	r0
    1460:	0f 90       	pop	r0
    1462:	0f 90       	pop	r0
    1464:	cf 91       	pop	r28
    1466:	df 91       	pop	r29
    1468:	08 95       	ret

0000146a <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    146a:	df 93       	push	r29
    146c:	cf 93       	push	r28
    146e:	00 d0       	rcall	.+0      	; 0x1470 <GPIO_writePort+0x6>
    1470:	00 d0       	rcall	.+0      	; 0x1472 <GPIO_writePort+0x8>
    1472:	cd b7       	in	r28, 0x3d	; 61
    1474:	de b7       	in	r29, 0x3e	; 62
    1476:	89 83       	std	Y+1, r24	; 0x01
    1478:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    147a:	89 81       	ldd	r24, Y+1	; 0x01
    147c:	84 30       	cpi	r24, 0x04	; 4
    147e:	90 f5       	brcc	.+100    	; 0x14e4 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1480:	89 81       	ldd	r24, Y+1	; 0x01
    1482:	28 2f       	mov	r18, r24
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	3c 83       	std	Y+4, r19	; 0x04
    1488:	2b 83       	std	Y+3, r18	; 0x03
    148a:	8b 81       	ldd	r24, Y+3	; 0x03
    148c:	9c 81       	ldd	r25, Y+4	; 0x04
    148e:	81 30       	cpi	r24, 0x01	; 1
    1490:	91 05       	cpc	r25, r1
    1492:	d1 f0       	breq	.+52     	; 0x14c8 <GPIO_writePort+0x5e>
    1494:	2b 81       	ldd	r18, Y+3	; 0x03
    1496:	3c 81       	ldd	r19, Y+4	; 0x04
    1498:	22 30       	cpi	r18, 0x02	; 2
    149a:	31 05       	cpc	r19, r1
    149c:	2c f4       	brge	.+10     	; 0x14a8 <GPIO_writePort+0x3e>
    149e:	8b 81       	ldd	r24, Y+3	; 0x03
    14a0:	9c 81       	ldd	r25, Y+4	; 0x04
    14a2:	00 97       	sbiw	r24, 0x00	; 0
    14a4:	61 f0       	breq	.+24     	; 0x14be <GPIO_writePort+0x54>
    14a6:	1e c0       	rjmp	.+60     	; 0x14e4 <GPIO_writePort+0x7a>
    14a8:	2b 81       	ldd	r18, Y+3	; 0x03
    14aa:	3c 81       	ldd	r19, Y+4	; 0x04
    14ac:	22 30       	cpi	r18, 0x02	; 2
    14ae:	31 05       	cpc	r19, r1
    14b0:	81 f0       	breq	.+32     	; 0x14d2 <GPIO_writePort+0x68>
    14b2:	8b 81       	ldd	r24, Y+3	; 0x03
    14b4:	9c 81       	ldd	r25, Y+4	; 0x04
    14b6:	83 30       	cpi	r24, 0x03	; 3
    14b8:	91 05       	cpc	r25, r1
    14ba:	81 f0       	breq	.+32     	; 0x14dc <GPIO_writePort+0x72>
    14bc:	13 c0       	rjmp	.+38     	; 0x14e4 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    14be:	eb e3       	ldi	r30, 0x3B	; 59
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	8a 81       	ldd	r24, Y+2	; 0x02
    14c4:	80 83       	st	Z, r24
    14c6:	0e c0       	rjmp	.+28     	; 0x14e4 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    14c8:	e8 e3       	ldi	r30, 0x38	; 56
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	8a 81       	ldd	r24, Y+2	; 0x02
    14ce:	80 83       	st	Z, r24
    14d0:	09 c0       	rjmp	.+18     	; 0x14e4 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    14d2:	e5 e3       	ldi	r30, 0x35	; 53
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	8a 81       	ldd	r24, Y+2	; 0x02
    14d8:	80 83       	st	Z, r24
    14da:	04 c0       	rjmp	.+8      	; 0x14e4 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    14dc:	e2 e3       	ldi	r30, 0x32	; 50
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	8a 81       	ldd	r24, Y+2	; 0x02
    14e2:	80 83       	st	Z, r24
			break;
		}
	}
}
    14e4:	0f 90       	pop	r0
    14e6:	0f 90       	pop	r0
    14e8:	0f 90       	pop	r0
    14ea:	0f 90       	pop	r0
    14ec:	cf 91       	pop	r28
    14ee:	df 91       	pop	r29
    14f0:	08 95       	ret

000014f2 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    14f2:	df 93       	push	r29
    14f4:	cf 93       	push	r28
    14f6:	00 d0       	rcall	.+0      	; 0x14f8 <GPIO_readPort+0x6>
    14f8:	00 d0       	rcall	.+0      	; 0x14fa <GPIO_readPort+0x8>
    14fa:	cd b7       	in	r28, 0x3d	; 61
    14fc:	de b7       	in	r29, 0x3e	; 62
    14fe:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1500:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1502:	8a 81       	ldd	r24, Y+2	; 0x02
    1504:	84 30       	cpi	r24, 0x04	; 4
    1506:	90 f5       	brcc	.+100    	; 0x156c <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1508:	8a 81       	ldd	r24, Y+2	; 0x02
    150a:	28 2f       	mov	r18, r24
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	3c 83       	std	Y+4, r19	; 0x04
    1510:	2b 83       	std	Y+3, r18	; 0x03
    1512:	8b 81       	ldd	r24, Y+3	; 0x03
    1514:	9c 81       	ldd	r25, Y+4	; 0x04
    1516:	81 30       	cpi	r24, 0x01	; 1
    1518:	91 05       	cpc	r25, r1
    151a:	d1 f0       	breq	.+52     	; 0x1550 <GPIO_readPort+0x5e>
    151c:	2b 81       	ldd	r18, Y+3	; 0x03
    151e:	3c 81       	ldd	r19, Y+4	; 0x04
    1520:	22 30       	cpi	r18, 0x02	; 2
    1522:	31 05       	cpc	r19, r1
    1524:	2c f4       	brge	.+10     	; 0x1530 <GPIO_readPort+0x3e>
    1526:	8b 81       	ldd	r24, Y+3	; 0x03
    1528:	9c 81       	ldd	r25, Y+4	; 0x04
    152a:	00 97       	sbiw	r24, 0x00	; 0
    152c:	61 f0       	breq	.+24     	; 0x1546 <GPIO_readPort+0x54>
    152e:	1e c0       	rjmp	.+60     	; 0x156c <GPIO_readPort+0x7a>
    1530:	2b 81       	ldd	r18, Y+3	; 0x03
    1532:	3c 81       	ldd	r19, Y+4	; 0x04
    1534:	22 30       	cpi	r18, 0x02	; 2
    1536:	31 05       	cpc	r19, r1
    1538:	81 f0       	breq	.+32     	; 0x155a <GPIO_readPort+0x68>
    153a:	8b 81       	ldd	r24, Y+3	; 0x03
    153c:	9c 81       	ldd	r25, Y+4	; 0x04
    153e:	83 30       	cpi	r24, 0x03	; 3
    1540:	91 05       	cpc	r25, r1
    1542:	81 f0       	breq	.+32     	; 0x1564 <GPIO_readPort+0x72>
    1544:	13 c0       	rjmp	.+38     	; 0x156c <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1546:	e9 e3       	ldi	r30, 0x39	; 57
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	80 81       	ld	r24, Z
    154c:	89 83       	std	Y+1, r24	; 0x01
    154e:	0e c0       	rjmp	.+28     	; 0x156c <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1550:	e6 e3       	ldi	r30, 0x36	; 54
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	80 81       	ld	r24, Z
    1556:	89 83       	std	Y+1, r24	; 0x01
    1558:	09 c0       	rjmp	.+18     	; 0x156c <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    155a:	e3 e3       	ldi	r30, 0x33	; 51
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	80 81       	ld	r24, Z
    1560:	89 83       	std	Y+1, r24	; 0x01
    1562:	04 c0       	rjmp	.+8      	; 0x156c <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1564:	e0 e3       	ldi	r30, 0x30	; 48
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	80 81       	ld	r24, Z
    156a:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    156c:	89 81       	ldd	r24, Y+1	; 0x01
}
    156e:	0f 90       	pop	r0
    1570:	0f 90       	pop	r0
    1572:	0f 90       	pop	r0
    1574:	0f 90       	pop	r0
    1576:	cf 91       	pop	r28
    1578:	df 91       	pop	r29
    157a:	08 95       	ret

0000157c <main>:
/*******************************************************************************
 *                              main code                                      *
 *******************************************************************************/

int main()
{
    157c:	df 93       	push	r29
    157e:	cf 93       	push	r28
    1580:	cd b7       	in	r28, 0x3d	; 61
    1582:	de b7       	in	r29, 0x3e	; 62
    1584:	61 97       	sbiw	r28, 0x11	; 17
    1586:	0f b6       	in	r0, 0x3f	; 63
    1588:	f8 94       	cli
    158a:	de bf       	out	0x3e, r29	; 62
    158c:	0f be       	out	0x3f, r0	; 63
    158e:	cd bf       	out	0x3d, r28	; 61
	// local variable and Set directions and Initial value
	//config to the uart driver
	uint8 Data;
	UART_ConfigType uartConfig = {eight_bit ,Disabled,one_bit,baud_9600};
    1590:	9e 01       	movw	r18, r28
    1592:	2e 5f       	subi	r18, 0xFE	; 254
    1594:	3f 4f       	sbci	r19, 0xFF	; 255
    1596:	3e 87       	std	Y+14, r19	; 0x0e
    1598:	2d 87       	std	Y+13, r18	; 0x0d
    159a:	8d e6       	ldi	r24, 0x6D	; 109
    159c:	91 e0       	ldi	r25, 0x01	; 1
    159e:	98 8b       	std	Y+16, r25	; 0x10
    15a0:	8f 87       	std	Y+15, r24	; 0x0f
    15a2:	97 e0       	ldi	r25, 0x07	; 7
    15a4:	99 8b       	std	Y+17, r25	; 0x11
    15a6:	ef 85       	ldd	r30, Y+15	; 0x0f
    15a8:	f8 89       	ldd	r31, Y+16	; 0x10
    15aa:	00 80       	ld	r0, Z
    15ac:	2f 85       	ldd	r18, Y+15	; 0x0f
    15ae:	38 89       	ldd	r19, Y+16	; 0x10
    15b0:	2f 5f       	subi	r18, 0xFF	; 255
    15b2:	3f 4f       	sbci	r19, 0xFF	; 255
    15b4:	38 8b       	std	Y+16, r19	; 0x10
    15b6:	2f 87       	std	Y+15, r18	; 0x0f
    15b8:	ed 85       	ldd	r30, Y+13	; 0x0d
    15ba:	fe 85       	ldd	r31, Y+14	; 0x0e
    15bc:	00 82       	st	Z, r0
    15be:	2d 85       	ldd	r18, Y+13	; 0x0d
    15c0:	3e 85       	ldd	r19, Y+14	; 0x0e
    15c2:	2f 5f       	subi	r18, 0xFF	; 255
    15c4:	3f 4f       	sbci	r19, 0xFF	; 255
    15c6:	3e 87       	std	Y+14, r19	; 0x0e
    15c8:	2d 87       	std	Y+13, r18	; 0x0d
    15ca:	39 89       	ldd	r19, Y+17	; 0x11
    15cc:	31 50       	subi	r19, 0x01	; 1
    15ce:	39 8b       	std	Y+17, r19	; 0x11
    15d0:	89 89       	ldd	r24, Y+17	; 0x11
    15d2:	88 23       	and	r24, r24
    15d4:	41 f7       	brne	.-48     	; 0x15a6 <main+0x2a>
	TWI_ConfigType twiConfig ={0x01,Prescaler_1};
    15d6:	81 e0       	ldi	r24, 0x01	; 1
    15d8:	89 87       	std	Y+9, r24	; 0x09
    15da:	1a 86       	std	Y+10, r1	; 0x0a

	//setup driver
	BUZZER_init();
    15dc:	0e 94 50 06 	call	0xca0	; 0xca0 <BUZZER_init>
	DcMotor_Init();
    15e0:	0e 94 79 06 	call	0xcf2	; 0xcf2 <DcMotor_Init>
	TWI_init(&twiConfig);
    15e4:	ce 01       	movw	r24, r28
    15e6:	09 96       	adiw	r24, 0x09	; 9
    15e8:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <TWI_init>
	UART_init(&uartConfig);
    15ec:	ce 01       	movw	r24, r28
    15ee:	02 96       	adiw	r24, 0x02	; 2
    15f0:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <UART_init>
	SREG |= (1<<7);
    15f4:	af e5       	ldi	r26, 0x5F	; 95
    15f6:	b0 e0       	ldi	r27, 0x00	; 0
    15f8:	ef e5       	ldi	r30, 0x5F	; 95
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	80 81       	ld	r24, Z
    15fe:	80 68       	ori	r24, 0x80	; 128
    1600:	8c 93       	st	X, r24

	while(1)
	{
		// waiting receive any step . what you do HMI_ECU ?
		Data =UART_recieveByte();
    1602:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <UART_recieveByte>
    1606:	89 83       	std	Y+1, r24	; 0x01
		switch(Data)
    1608:	89 81       	ldd	r24, Y+1	; 0x01
    160a:	e8 2f       	mov	r30, r24
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	fc 87       	std	Y+12, r31	; 0x0c
    1610:	eb 87       	std	Y+11, r30	; 0x0b
    1612:	2b 85       	ldd	r18, Y+11	; 0x0b
    1614:	3c 85       	ldd	r19, Y+12	; 0x0c
    1616:	22 3e       	cpi	r18, 0xE2	; 226
    1618:	31 05       	cpc	r19, r1
    161a:	71 f1       	breq	.+92     	; 0x1678 <main+0xfc>
    161c:	8b 85       	ldd	r24, Y+11	; 0x0b
    161e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1620:	83 3e       	cpi	r24, 0xE3	; 227
    1622:	91 05       	cpc	r25, r1
    1624:	34 f4       	brge	.+12     	; 0x1632 <main+0xb6>
    1626:	eb 85       	ldd	r30, Y+11	; 0x0b
    1628:	fc 85       	ldd	r31, Y+12	; 0x0c
    162a:	e1 3e       	cpi	r30, 0xE1	; 225
    162c:	f1 05       	cpc	r31, r1
    162e:	61 f0       	breq	.+24     	; 0x1648 <main+0xcc>
    1630:	e8 cf       	rjmp	.-48     	; 0x1602 <main+0x86>
    1632:	2b 85       	ldd	r18, Y+11	; 0x0b
    1634:	3c 85       	ldd	r19, Y+12	; 0x0c
    1636:	23 3e       	cpi	r18, 0xE3	; 227
    1638:	31 05       	cpc	r19, r1
    163a:	71 f0       	breq	.+28     	; 0x1658 <main+0xdc>
    163c:	8b 85       	ldd	r24, Y+11	; 0x0b
    163e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1640:	84 3e       	cpi	r24, 0xE4	; 228
    1642:	91 05       	cpc	r25, r1
    1644:	49 f1       	breq	.+82     	; 0x1698 <main+0x11c>
    1646:	dd cf       	rjmp	.-70     	; 0x1602 <main+0x86>
		/* if send STEP_1_SAVE_PASSWORD jump here and run this code
		 *
		 */
		case  STEP_1_SAVE_PASSWORD :

			RECEIVE_PASSWORD(); // receive password
    1648:	0e 94 4f 0b 	call	0x169e	; 0x169e <RECEIVE_PASSWORD>
			SAVE_PASSWORD_FOR_EPPROM(); //save password in EEPROM
    164c:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <SAVE_PASSWORD_FOR_EPPROM>
			UART_sendByte(SUCCESS_MC);	//sent to HMI micro success save password
    1650:	83 ef       	ldi	r24, 0xF3	; 243
    1652:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <UART_sendByte>
    1656:	d5 cf       	rjmp	.-86     	; 0x1602 <main+0x86>
			break;
		case  STEP_2_OPEN_DOOR :
			/*
			 * if send STEP_2_OPEN_DOOR jump here and run this code
			 */
			RECEIVE_PASSWORD(); // receive password
    1658:	0e 94 4f 0b 	call	0x169e	; 0x169e <RECEIVE_PASSWORD>
			if(CHECK_PASSWORD_FROM_EPPROM()) // check if the same password in eeprom
    165c:	0e 94 14 0c 	call	0x1828	; 0x1828 <CHECK_PASSWORD_FROM_EPPROM>
    1660:	88 23       	and	r24, r24
    1662:	31 f0       	breq	.+12     	; 0x1670 <main+0xf4>
			{
				UART_sendByte(SUCCESS_MC); // send SUCCESS_MC to HMI micro
    1664:	83 ef       	ldi	r24, 0xF3	; 243
    1666:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <UART_sendByte>
				OPEN_DOOR(); //call open door
    166a:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <OPEN_DOOR>
    166e:	c9 cf       	rjmp	.-110    	; 0x1602 <main+0x86>
			}
			else
			{
				UART_sendByte(ERROR_MC); // else not correct password send ERROR_MC to HMI micro
    1670:	85 ef       	ldi	r24, 0xF5	; 245
    1672:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <UART_sendByte>
    1676:	c5 cf       	rjmp	.-118    	; 0x1602 <main+0x86>
			break;
		case  STEP_3_CHANGE_PASSWORD :
			/*
			 * if send STEP_3_CHANGE_PASSWORD jump here and run this code
			 */
			RECEIVE_PASSWORD(); // receive password
    1678:	0e 94 4f 0b 	call	0x169e	; 0x169e <RECEIVE_PASSWORD>
			if(CHECK_PASSWORD_FROM_EPPROM()) // check if the same password in eeprom
    167c:	0e 94 14 0c 	call	0x1828	; 0x1828 <CHECK_PASSWORD_FROM_EPPROM>
    1680:	88 23       	and	r24, r24
    1682:	31 f0       	breq	.+12     	; 0x1690 <main+0x114>
			{
				SAVE_PASSWORD_FOR_EPPROM(); //save new password to EEPROM
    1684:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <SAVE_PASSWORD_FOR_EPPROM>
				UART_sendByte(SUCCESS_MC); // send success when save password
    1688:	83 ef       	ldi	r24, 0xF3	; 243
    168a:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <UART_sendByte>
    168e:	b9 cf       	rjmp	.-142    	; 0x1602 <main+0x86>
			}
			else
			{

				UART_sendByte(ERROR_MC); // else password not correct send ERROR_MC to  HMI micro
    1690:	85 ef       	ldi	r24, 0xF5	; 245
    1692:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <UART_sendByte>
    1696:	b5 cf       	rjmp	.-150    	; 0x1602 <main+0x86>

			/*
			 * if send STEP_4_BUZZER_ON jump here and run this code
			 */

			TURN_ON_BUZZER(); //call function turn on buzzer to alarm admin
    1698:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <TURN_ON_BUZZER>
    169c:	b2 cf       	rjmp	.-156    	; 0x1602 <main+0x86>

0000169e <RECEIVE_PASSWORD>:
/*******************************************************************************
 *                              Functions                                      *
 *******************************************************************************/

void RECEIVE_PASSWORD (void)
{
    169e:	0f 93       	push	r16
    16a0:	1f 93       	push	r17
    16a2:	df 93       	push	r29
    16a4:	cf 93       	push	r28
    16a6:	0f 92       	push	r0
    16a8:	cd b7       	in	r28, 0x3d	; 61
    16aa:	de b7       	in	r29, 0x3e	; 62
	// the first receive password from MC1 element  BY element
	uint8 i;
	while(UART_recieveByte()!= START_SEND_PASSWOED_ASK );
    16ac:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <UART_recieveByte>
    16b0:	86 3f       	cpi	r24, 0xF6	; 246
    16b2:	e1 f7       	brne	.-8      	; 0x16ac <RECEIVE_PASSWORD+0xe>
	UART_sendByte(START_SEND_PASSWOED);
    16b4:	80 ef       	ldi	r24, 0xF0	; 240
    16b6:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <UART_sendByte>
	for(i=0 ; i < NUMBER_FOR_PASSWORD ; i++)
    16ba:	19 82       	std	Y+1, r1	; 0x01
    16bc:	0c c0       	rjmp	.+24     	; 0x16d6 <RECEIVE_PASSWORD+0x38>
	{
		password[i]=UART_recieveByte();
    16be:	89 81       	ldd	r24, Y+1	; 0x01
    16c0:	08 2f       	mov	r16, r24
    16c2:	10 e0       	ldi	r17, 0x00	; 0
    16c4:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <UART_recieveByte>
    16c8:	f8 01       	movw	r30, r16
    16ca:	e8 59       	subi	r30, 0x98	; 152
    16cc:	fe 4f       	sbci	r31, 0xFE	; 254
    16ce:	80 83       	st	Z, r24
{
	// the first receive password from MC1 element  BY element
	uint8 i;
	while(UART_recieveByte()!= START_SEND_PASSWOED_ASK );
	UART_sendByte(START_SEND_PASSWOED);
	for(i=0 ; i < NUMBER_FOR_PASSWORD ; i++)
    16d0:	89 81       	ldd	r24, Y+1	; 0x01
    16d2:	8f 5f       	subi	r24, 0xFF	; 255
    16d4:	89 83       	std	Y+1, r24	; 0x01
    16d6:	89 81       	ldd	r24, Y+1	; 0x01
    16d8:	85 30       	cpi	r24, 0x05	; 5
    16da:	88 f3       	brcs	.-30     	; 0x16be <RECEIVE_PASSWORD+0x20>
	{
		password[i]=UART_recieveByte();
	}
}
    16dc:	0f 90       	pop	r0
    16de:	cf 91       	pop	r28
    16e0:	df 91       	pop	r29
    16e2:	1f 91       	pop	r17
    16e4:	0f 91       	pop	r16
    16e6:	08 95       	ret

000016e8 <SAVE_PASSWORD_FOR_EPPROM>:

void SAVE_PASSWORD_FOR_EPPROM(void)
{
    16e8:	df 93       	push	r29
    16ea:	cf 93       	push	r28
    16ec:	cd b7       	in	r28, 0x3d	; 61
    16ee:	de b7       	in	r29, 0x3e	; 62
    16f0:	2f 97       	sbiw	r28, 0x0f	; 15
    16f2:	0f b6       	in	r0, 0x3f	; 63
    16f4:	f8 94       	cli
    16f6:	de bf       	out	0x3e, r29	; 62
    16f8:	0f be       	out	0x3f, r0	; 63
    16fa:	cd bf       	out	0x3d, r28	; 61
	// the second save password for  EEPROM element  BY element
	uint8 i=0;
    16fc:	1f 86       	std	Y+15, r1	; 0x0f
	for(i=0 ; i < NUMBER_FOR_PASSWORD ; i++)
    16fe:	1f 86       	std	Y+15, r1	; 0x0f
    1700:	86 c0       	rjmp	.+268    	; 0x180e <SAVE_PASSWORD_FOR_EPPROM+0x126>
	{
		EEPROM_writeByte( (0x0300)+i , password[i]);
    1702:	8f 85       	ldd	r24, Y+15	; 0x0f
    1704:	88 2f       	mov	r24, r24
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	80 50       	subi	r24, 0x00	; 0
    170a:	9d 4f       	sbci	r25, 0xFD	; 253
    170c:	ac 01       	movw	r20, r24
    170e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1710:	88 2f       	mov	r24, r24
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	fc 01       	movw	r30, r24
    1716:	e8 59       	subi	r30, 0x98	; 152
    1718:	fe 4f       	sbci	r31, 0xFE	; 254
    171a:	20 81       	ld	r18, Z
    171c:	ca 01       	movw	r24, r20
    171e:	62 2f       	mov	r22, r18
    1720:	0e 94 df 06 	call	0xdbe	; 0xdbe <EEPROM_writeByte>
    1724:	80 e0       	ldi	r24, 0x00	; 0
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	a0 e2       	ldi	r26, 0x20	; 32
    172a:	b1 e4       	ldi	r27, 0x41	; 65
    172c:	8b 87       	std	Y+11, r24	; 0x0b
    172e:	9c 87       	std	Y+12, r25	; 0x0c
    1730:	ad 87       	std	Y+13, r26	; 0x0d
    1732:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1734:	6b 85       	ldd	r22, Y+11	; 0x0b
    1736:	7c 85       	ldd	r23, Y+12	; 0x0c
    1738:	8d 85       	ldd	r24, Y+13	; 0x0d
    173a:	9e 85       	ldd	r25, Y+14	; 0x0e
    173c:	20 e0       	ldi	r18, 0x00	; 0
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	4a ef       	ldi	r20, 0xFA	; 250
    1742:	54 e4       	ldi	r21, 0x44	; 68
    1744:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1748:	dc 01       	movw	r26, r24
    174a:	cb 01       	movw	r24, r22
    174c:	8f 83       	std	Y+7, r24	; 0x07
    174e:	98 87       	std	Y+8, r25	; 0x08
    1750:	a9 87       	std	Y+9, r26	; 0x09
    1752:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1754:	6f 81       	ldd	r22, Y+7	; 0x07
    1756:	78 85       	ldd	r23, Y+8	; 0x08
    1758:	89 85       	ldd	r24, Y+9	; 0x09
    175a:	9a 85       	ldd	r25, Y+10	; 0x0a
    175c:	20 e0       	ldi	r18, 0x00	; 0
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	40 e8       	ldi	r20, 0x80	; 128
    1762:	5f e3       	ldi	r21, 0x3F	; 63
    1764:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1768:	88 23       	and	r24, r24
    176a:	2c f4       	brge	.+10     	; 0x1776 <SAVE_PASSWORD_FOR_EPPROM+0x8e>
		__ticks = 1;
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	9e 83       	std	Y+6, r25	; 0x06
    1772:	8d 83       	std	Y+5, r24	; 0x05
    1774:	3f c0       	rjmp	.+126    	; 0x17f4 <SAVE_PASSWORD_FOR_EPPROM+0x10c>
	else if (__tmp > 65535)
    1776:	6f 81       	ldd	r22, Y+7	; 0x07
    1778:	78 85       	ldd	r23, Y+8	; 0x08
    177a:	89 85       	ldd	r24, Y+9	; 0x09
    177c:	9a 85       	ldd	r25, Y+10	; 0x0a
    177e:	20 e0       	ldi	r18, 0x00	; 0
    1780:	3f ef       	ldi	r19, 0xFF	; 255
    1782:	4f e7       	ldi	r20, 0x7F	; 127
    1784:	57 e4       	ldi	r21, 0x47	; 71
    1786:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    178a:	18 16       	cp	r1, r24
    178c:	4c f5       	brge	.+82     	; 0x17e0 <SAVE_PASSWORD_FOR_EPPROM+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    178e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1790:	7c 85       	ldd	r23, Y+12	; 0x0c
    1792:	8d 85       	ldd	r24, Y+13	; 0x0d
    1794:	9e 85       	ldd	r25, Y+14	; 0x0e
    1796:	20 e0       	ldi	r18, 0x00	; 0
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	40 e2       	ldi	r20, 0x20	; 32
    179c:	51 e4       	ldi	r21, 0x41	; 65
    179e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17a2:	dc 01       	movw	r26, r24
    17a4:	cb 01       	movw	r24, r22
    17a6:	bc 01       	movw	r22, r24
    17a8:	cd 01       	movw	r24, r26
    17aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ae:	dc 01       	movw	r26, r24
    17b0:	cb 01       	movw	r24, r22
    17b2:	9e 83       	std	Y+6, r25	; 0x06
    17b4:	8d 83       	std	Y+5, r24	; 0x05
    17b6:	0f c0       	rjmp	.+30     	; 0x17d6 <SAVE_PASSWORD_FOR_EPPROM+0xee>
    17b8:	88 ec       	ldi	r24, 0xC8	; 200
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	9c 83       	std	Y+4, r25	; 0x04
    17be:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    17c0:	8b 81       	ldd	r24, Y+3	; 0x03
    17c2:	9c 81       	ldd	r25, Y+4	; 0x04
    17c4:	01 97       	sbiw	r24, 0x01	; 1
    17c6:	f1 f7       	brne	.-4      	; 0x17c4 <SAVE_PASSWORD_FOR_EPPROM+0xdc>
    17c8:	9c 83       	std	Y+4, r25	; 0x04
    17ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17cc:	8d 81       	ldd	r24, Y+5	; 0x05
    17ce:	9e 81       	ldd	r25, Y+6	; 0x06
    17d0:	01 97       	sbiw	r24, 0x01	; 1
    17d2:	9e 83       	std	Y+6, r25	; 0x06
    17d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17d6:	8d 81       	ldd	r24, Y+5	; 0x05
    17d8:	9e 81       	ldd	r25, Y+6	; 0x06
    17da:	00 97       	sbiw	r24, 0x00	; 0
    17dc:	69 f7       	brne	.-38     	; 0x17b8 <SAVE_PASSWORD_FOR_EPPROM+0xd0>
    17de:	14 c0       	rjmp	.+40     	; 0x1808 <SAVE_PASSWORD_FOR_EPPROM+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17e0:	6f 81       	ldd	r22, Y+7	; 0x07
    17e2:	78 85       	ldd	r23, Y+8	; 0x08
    17e4:	89 85       	ldd	r24, Y+9	; 0x09
    17e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    17e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ec:	dc 01       	movw	r26, r24
    17ee:	cb 01       	movw	r24, r22
    17f0:	9e 83       	std	Y+6, r25	; 0x06
    17f2:	8d 83       	std	Y+5, r24	; 0x05
    17f4:	8d 81       	ldd	r24, Y+5	; 0x05
    17f6:	9e 81       	ldd	r25, Y+6	; 0x06
    17f8:	9a 83       	std	Y+2, r25	; 0x02
    17fa:	89 83       	std	Y+1, r24	; 0x01
    17fc:	89 81       	ldd	r24, Y+1	; 0x01
    17fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1800:	01 97       	sbiw	r24, 0x01	; 1
    1802:	f1 f7       	brne	.-4      	; 0x1800 <SAVE_PASSWORD_FOR_EPPROM+0x118>
    1804:	9a 83       	std	Y+2, r25	; 0x02
    1806:	89 83       	std	Y+1, r24	; 0x01

void SAVE_PASSWORD_FOR_EPPROM(void)
{
	// the second save password for  EEPROM element  BY element
	uint8 i=0;
	for(i=0 ; i < NUMBER_FOR_PASSWORD ; i++)
    1808:	8f 85       	ldd	r24, Y+15	; 0x0f
    180a:	8f 5f       	subi	r24, 0xFF	; 255
    180c:	8f 87       	std	Y+15, r24	; 0x0f
    180e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1810:	85 30       	cpi	r24, 0x05	; 5
    1812:	08 f4       	brcc	.+2      	; 0x1816 <SAVE_PASSWORD_FOR_EPPROM+0x12e>
    1814:	76 cf       	rjmp	.-276    	; 0x1702 <SAVE_PASSWORD_FOR_EPPROM+0x1a>
	{
		EEPROM_writeByte( (0x0300)+i , password[i]);
		_delay_ms(10);
	}

}
    1816:	2f 96       	adiw	r28, 0x0f	; 15
    1818:	0f b6       	in	r0, 0x3f	; 63
    181a:	f8 94       	cli
    181c:	de bf       	out	0x3e, r29	; 62
    181e:	0f be       	out	0x3f, r0	; 63
    1820:	cd bf       	out	0x3d, r28	; 61
    1822:	cf 91       	pop	r28
    1824:	df 91       	pop	r29
    1826:	08 95       	ret

00001828 <CHECK_PASSWORD_FROM_EPPROM>:
uint8 CHECK_PASSWORD_FROM_EPPROM(void)
{
    1828:	df 93       	push	r29
    182a:	cf 93       	push	r28
    182c:	cd b7       	in	r28, 0x3d	; 61
    182e:	de b7       	in	r29, 0x3e	; 62
    1830:	61 97       	sbiw	r28, 0x11	; 17
    1832:	0f b6       	in	r0, 0x3f	; 63
    1834:	f8 94       	cli
    1836:	de bf       	out	0x3e, r29	; 62
    1838:	0f be       	out	0x3f, r0	; 63
    183a:	cd bf       	out	0x3d, r28	; 61
	// check password for  EEPROM element  BY element and return true or false
	uint8 i,count=0;
    183c:	1f 86       	std	Y+15, r1	; 0x0f
	for(i=0 ; i < NUMBER_FOR_PASSWORD ; i++)
    183e:	18 8a       	std	Y+16, r1	; 0x10
    1840:	85 c0       	rjmp	.+266    	; 0x194c <CHECK_PASSWORD_FROM_EPPROM+0x124>
	{
		EEPROM_readByte( (0x0300)+i ,&checkPassword[i]);
    1842:	88 89       	ldd	r24, Y+16	; 0x10
    1844:	88 2f       	mov	r24, r24
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	80 50       	subi	r24, 0x00	; 0
    184a:	9d 4f       	sbci	r25, 0xFD	; 253
    184c:	ac 01       	movw	r20, r24
    184e:	88 89       	ldd	r24, Y+16	; 0x10
    1850:	88 2f       	mov	r24, r24
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	9c 01       	movw	r18, r24
    1856:	25 58       	subi	r18, 0x85	; 133
    1858:	3e 4f       	sbci	r19, 0xFE	; 254
    185a:	ca 01       	movw	r24, r20
    185c:	b9 01       	movw	r22, r18
    185e:	0e 94 20 07 	call	0xe40	; 0xe40 <EEPROM_readByte>
    1862:	80 e0       	ldi	r24, 0x00	; 0
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	a0 e2       	ldi	r26, 0x20	; 32
    1868:	b1 e4       	ldi	r27, 0x41	; 65
    186a:	8b 87       	std	Y+11, r24	; 0x0b
    186c:	9c 87       	std	Y+12, r25	; 0x0c
    186e:	ad 87       	std	Y+13, r26	; 0x0d
    1870:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1872:	6b 85       	ldd	r22, Y+11	; 0x0b
    1874:	7c 85       	ldd	r23, Y+12	; 0x0c
    1876:	8d 85       	ldd	r24, Y+13	; 0x0d
    1878:	9e 85       	ldd	r25, Y+14	; 0x0e
    187a:	20 e0       	ldi	r18, 0x00	; 0
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	4a ef       	ldi	r20, 0xFA	; 250
    1880:	54 e4       	ldi	r21, 0x44	; 68
    1882:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1886:	dc 01       	movw	r26, r24
    1888:	cb 01       	movw	r24, r22
    188a:	8f 83       	std	Y+7, r24	; 0x07
    188c:	98 87       	std	Y+8, r25	; 0x08
    188e:	a9 87       	std	Y+9, r26	; 0x09
    1890:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1892:	6f 81       	ldd	r22, Y+7	; 0x07
    1894:	78 85       	ldd	r23, Y+8	; 0x08
    1896:	89 85       	ldd	r24, Y+9	; 0x09
    1898:	9a 85       	ldd	r25, Y+10	; 0x0a
    189a:	20 e0       	ldi	r18, 0x00	; 0
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	40 e8       	ldi	r20, 0x80	; 128
    18a0:	5f e3       	ldi	r21, 0x3F	; 63
    18a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18a6:	88 23       	and	r24, r24
    18a8:	2c f4       	brge	.+10     	; 0x18b4 <CHECK_PASSWORD_FROM_EPPROM+0x8c>
		__ticks = 1;
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	9e 83       	std	Y+6, r25	; 0x06
    18b0:	8d 83       	std	Y+5, r24	; 0x05
    18b2:	3f c0       	rjmp	.+126    	; 0x1932 <CHECK_PASSWORD_FROM_EPPROM+0x10a>
	else if (__tmp > 65535)
    18b4:	6f 81       	ldd	r22, Y+7	; 0x07
    18b6:	78 85       	ldd	r23, Y+8	; 0x08
    18b8:	89 85       	ldd	r24, Y+9	; 0x09
    18ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    18bc:	20 e0       	ldi	r18, 0x00	; 0
    18be:	3f ef       	ldi	r19, 0xFF	; 255
    18c0:	4f e7       	ldi	r20, 0x7F	; 127
    18c2:	57 e4       	ldi	r21, 0x47	; 71
    18c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18c8:	18 16       	cp	r1, r24
    18ca:	4c f5       	brge	.+82     	; 0x191e <CHECK_PASSWORD_FROM_EPPROM+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    18ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    18d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    18d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    18d4:	20 e0       	ldi	r18, 0x00	; 0
    18d6:	30 e0       	ldi	r19, 0x00	; 0
    18d8:	40 e2       	ldi	r20, 0x20	; 32
    18da:	51 e4       	ldi	r21, 0x41	; 65
    18dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18e0:	dc 01       	movw	r26, r24
    18e2:	cb 01       	movw	r24, r22
    18e4:	bc 01       	movw	r22, r24
    18e6:	cd 01       	movw	r24, r26
    18e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ec:	dc 01       	movw	r26, r24
    18ee:	cb 01       	movw	r24, r22
    18f0:	9e 83       	std	Y+6, r25	; 0x06
    18f2:	8d 83       	std	Y+5, r24	; 0x05
    18f4:	0f c0       	rjmp	.+30     	; 0x1914 <CHECK_PASSWORD_FROM_EPPROM+0xec>
    18f6:	88 ec       	ldi	r24, 0xC8	; 200
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	9c 83       	std	Y+4, r25	; 0x04
    18fc:	8b 83       	std	Y+3, r24	; 0x03
    18fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1900:	9c 81       	ldd	r25, Y+4	; 0x04
    1902:	01 97       	sbiw	r24, 0x01	; 1
    1904:	f1 f7       	brne	.-4      	; 0x1902 <CHECK_PASSWORD_FROM_EPPROM+0xda>
    1906:	9c 83       	std	Y+4, r25	; 0x04
    1908:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    190a:	8d 81       	ldd	r24, Y+5	; 0x05
    190c:	9e 81       	ldd	r25, Y+6	; 0x06
    190e:	01 97       	sbiw	r24, 0x01	; 1
    1910:	9e 83       	std	Y+6, r25	; 0x06
    1912:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1914:	8d 81       	ldd	r24, Y+5	; 0x05
    1916:	9e 81       	ldd	r25, Y+6	; 0x06
    1918:	00 97       	sbiw	r24, 0x00	; 0
    191a:	69 f7       	brne	.-38     	; 0x18f6 <CHECK_PASSWORD_FROM_EPPROM+0xce>
    191c:	14 c0       	rjmp	.+40     	; 0x1946 <CHECK_PASSWORD_FROM_EPPROM+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    191e:	6f 81       	ldd	r22, Y+7	; 0x07
    1920:	78 85       	ldd	r23, Y+8	; 0x08
    1922:	89 85       	ldd	r24, Y+9	; 0x09
    1924:	9a 85       	ldd	r25, Y+10	; 0x0a
    1926:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    192a:	dc 01       	movw	r26, r24
    192c:	cb 01       	movw	r24, r22
    192e:	9e 83       	std	Y+6, r25	; 0x06
    1930:	8d 83       	std	Y+5, r24	; 0x05
    1932:	8d 81       	ldd	r24, Y+5	; 0x05
    1934:	9e 81       	ldd	r25, Y+6	; 0x06
    1936:	9a 83       	std	Y+2, r25	; 0x02
    1938:	89 83       	std	Y+1, r24	; 0x01
    193a:	89 81       	ldd	r24, Y+1	; 0x01
    193c:	9a 81       	ldd	r25, Y+2	; 0x02
    193e:	01 97       	sbiw	r24, 0x01	; 1
    1940:	f1 f7       	brne	.-4      	; 0x193e <CHECK_PASSWORD_FROM_EPPROM+0x116>
    1942:	9a 83       	std	Y+2, r25	; 0x02
    1944:	89 83       	std	Y+1, r24	; 0x01
}
uint8 CHECK_PASSWORD_FROM_EPPROM(void)
{
	// check password for  EEPROM element  BY element and return true or false
	uint8 i,count=0;
	for(i=0 ; i < NUMBER_FOR_PASSWORD ; i++)
    1946:	88 89       	ldd	r24, Y+16	; 0x10
    1948:	8f 5f       	subi	r24, 0xFF	; 255
    194a:	88 8b       	std	Y+16, r24	; 0x10
    194c:	88 89       	ldd	r24, Y+16	; 0x10
    194e:	85 30       	cpi	r24, 0x05	; 5
    1950:	08 f4       	brcc	.+2      	; 0x1954 <CHECK_PASSWORD_FROM_EPPROM+0x12c>
    1952:	77 cf       	rjmp	.-274    	; 0x1842 <CHECK_PASSWORD_FROM_EPPROM+0x1a>
	{
		EEPROM_readByte( (0x0300)+i ,&checkPassword[i]);
		_delay_ms(10);
	}
	for(i=0 ; i < NUMBER_FOR_PASSWORD ; i++)
    1954:	18 8a       	std	Y+16, r1	; 0x10
    1956:	16 c0       	rjmp	.+44     	; 0x1984 <CHECK_PASSWORD_FROM_EPPROM+0x15c>
	{
		if( checkPassword[i]==password[i])
    1958:	88 89       	ldd	r24, Y+16	; 0x10
    195a:	88 2f       	mov	r24, r24
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	fc 01       	movw	r30, r24
    1960:	e5 58       	subi	r30, 0x85	; 133
    1962:	fe 4f       	sbci	r31, 0xFE	; 254
    1964:	20 81       	ld	r18, Z
    1966:	88 89       	ldd	r24, Y+16	; 0x10
    1968:	88 2f       	mov	r24, r24
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	fc 01       	movw	r30, r24
    196e:	e8 59       	subi	r30, 0x98	; 152
    1970:	fe 4f       	sbci	r31, 0xFE	; 254
    1972:	80 81       	ld	r24, Z
    1974:	28 17       	cp	r18, r24
    1976:	19 f4       	brne	.+6      	; 0x197e <CHECK_PASSWORD_FROM_EPPROM+0x156>
			count++;
    1978:	8f 85       	ldd	r24, Y+15	; 0x0f
    197a:	8f 5f       	subi	r24, 0xFF	; 255
    197c:	8f 87       	std	Y+15, r24	; 0x0f
	for(i=0 ; i < NUMBER_FOR_PASSWORD ; i++)
	{
		EEPROM_readByte( (0x0300)+i ,&checkPassword[i]);
		_delay_ms(10);
	}
	for(i=0 ; i < NUMBER_FOR_PASSWORD ; i++)
    197e:	88 89       	ldd	r24, Y+16	; 0x10
    1980:	8f 5f       	subi	r24, 0xFF	; 255
    1982:	88 8b       	std	Y+16, r24	; 0x10
    1984:	88 89       	ldd	r24, Y+16	; 0x10
    1986:	85 30       	cpi	r24, 0x05	; 5
    1988:	38 f3       	brcs	.-50     	; 0x1958 <CHECK_PASSWORD_FROM_EPPROM+0x130>
	{
		if( checkPassword[i]==password[i])
			count++;
	}
	if(count==NUMBER_FOR_PASSWORD)
    198a:	8f 85       	ldd	r24, Y+15	; 0x0f
    198c:	85 30       	cpi	r24, 0x05	; 5
    198e:	19 f4       	brne	.+6      	; 0x1996 <CHECK_PASSWORD_FROM_EPPROM+0x16e>
	{
		return 1;
    1990:	81 e0       	ldi	r24, 0x01	; 1
    1992:	89 8b       	std	Y+17, r24	; 0x11
    1994:	01 c0       	rjmp	.+2      	; 0x1998 <CHECK_PASSWORD_FROM_EPPROM+0x170>
	}
	return FALSE;
    1996:	19 8a       	std	Y+17, r1	; 0x11
    1998:	89 89       	ldd	r24, Y+17	; 0x11
}
    199a:	61 96       	adiw	r28, 0x11	; 17
    199c:	0f b6       	in	r0, 0x3f	; 63
    199e:	f8 94       	cli
    19a0:	de bf       	out	0x3e, r29	; 62
    19a2:	0f be       	out	0x3f, r0	; 63
    19a4:	cd bf       	out	0x3d, r28	; 61
    19a6:	cf 91       	pop	r28
    19a8:	df 91       	pop	r29
    19aa:	08 95       	ret

000019ac <OPEN_DOOR>:

void OPEN_DOOR (void)
{
    19ac:	df 93       	push	r29
    19ae:	cf 93       	push	r28
    19b0:	cd b7       	in	r28, 0x3d	; 61
    19b2:	de b7       	in	r29, 0x3e	; 62
	//rotates motor for 15-seconds CW and display a message on the screen
	//“Door is Unlocking”
	DcMotor_Rotate(CW,100);
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	64 e6       	ldi	r22, 0x64	; 100
    19b8:	0e 94 94 06 	call	0xd28	; 0xd28 <DcMotor_Rotate>
	UART_sendByte(DOOR_OPEN);
    19bc:	81 ef       	ldi	r24, 0xF1	; 241
    19be:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <UART_sendByte>
	delaySeconds(15);
    19c2:	8f e0       	ldi	r24, 0x0F	; 15
    19c4:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <delaySeconds>

	// hold the motor for 3-seconds.
	DcMotor_Rotate(STOP, 100);
    19c8:	80 e0       	ldi	r24, 0x00	; 0
    19ca:	64 e6       	ldi	r22, 0x64	; 100
    19cc:	0e 94 94 06 	call	0xd28	; 0xd28 <DcMotor_Rotate>
	delaySeconds(3);
    19d0:	83 e0       	ldi	r24, 0x03	; 3
    19d2:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <delaySeconds>
	//rotates motor for 15-seconds A-CW and display a message on the screen
	//“Door is Locking”
	DcMotor_Rotate(A_CW,100);
    19d6:	82 e0       	ldi	r24, 0x02	; 2
    19d8:	64 e6       	ldi	r22, 0x64	; 100
    19da:	0e 94 94 06 	call	0xd28	; 0xd28 <DcMotor_Rotate>
	UART_sendByte(DOOR_CLOSED);
    19de:	82 ef       	ldi	r24, 0xF2	; 242
    19e0:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <UART_sendByte>
	delaySeconds(15);
    19e4:	8f e0       	ldi	r24, 0x0F	; 15
    19e6:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <delaySeconds>
	// STOP MOTOR
	DcMotor_Rotate(STOP, 100);
    19ea:	80 e0       	ldi	r24, 0x00	; 0
    19ec:	64 e6       	ldi	r22, 0x64	; 100
    19ee:	0e 94 94 06 	call	0xd28	; 0xd28 <DcMotor_Rotate>
}
    19f2:	cf 91       	pop	r28
    19f4:	df 91       	pop	r29
    19f6:	08 95       	ret

000019f8 <TURN_ON_BUZZER>:

void TURN_ON_BUZZER (void)
{
    19f8:	df 93       	push	r29
    19fa:	cf 93       	push	r28
    19fc:	cd b7       	in	r28, 0x3d	; 61
    19fe:	de b7       	in	r29, 0x3e	; 62
	//Activate Buzzer for 1-minute.
	BUZZER_on();
    1a00:	0e 94 61 06 	call	0xcc2	; 0xcc2 <BUZZER_on>
	delaySeconds(60);
    1a04:	8c e3       	ldi	r24, 0x3C	; 60
    1a06:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <delaySeconds>
	BUZZER_off();
    1a0a:	0e 94 6d 06 	call	0xcda	; 0xcda <BUZZER_off>
}
    1a0e:	cf 91       	pop	r28
    1a10:	df 91       	pop	r29
    1a12:	08 95       	ret

00001a14 <delaySeconds>:
/*
 * Description :
 * A function that counts the sec by causing an interrupt every second and increase our global variable
 */
void delaySeconds(uint8 sec)
{
    1a14:	df 93       	push	r29
    1a16:	cf 93       	push	r28
    1a18:	cd b7       	in	r28, 0x3d	; 61
    1a1a:	de b7       	in	r29, 0x3e	; 62
    1a1c:	2c 97       	sbiw	r28, 0x0c	; 12
    1a1e:	0f b6       	in	r0, 0x3f	; 63
    1a20:	f8 94       	cli
    1a22:	de bf       	out	0x3e, r29	; 62
    1a24:	0f be       	out	0x3f, r0	; 63
    1a26:	cd bf       	out	0x3d, r28	; 61
    1a28:	8f 83       	std	Y+7, r24	; 0x07
	/* setting the callBack function to count seconds */
	TIMER1_setCallBack(countSec);
    1a2a:	8f e4       	ldi	r24, 0x4F	; 79
    1a2c:	9d e0       	ldi	r25, 0x0D	; 13
    1a2e:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <TIMER1_setCallBack>
	/* timer1 configurations to count sec per interrupt */
	Timer1_ConfigType timer1Config = {0,31250,N_256,COMPARE};
    1a32:	ce 01       	movw	r24, r28
    1a34:	01 96       	adiw	r24, 0x01	; 1
    1a36:	99 87       	std	Y+9, r25	; 0x09
    1a38:	88 87       	std	Y+8, r24	; 0x08
    1a3a:	e4 e7       	ldi	r30, 0x74	; 116
    1a3c:	f1 e0       	ldi	r31, 0x01	; 1
    1a3e:	fb 87       	std	Y+11, r31	; 0x0b
    1a40:	ea 87       	std	Y+10, r30	; 0x0a
    1a42:	f6 e0       	ldi	r31, 0x06	; 6
    1a44:	fc 87       	std	Y+12, r31	; 0x0c
    1a46:	ea 85       	ldd	r30, Y+10	; 0x0a
    1a48:	fb 85       	ldd	r31, Y+11	; 0x0b
    1a4a:	00 80       	ld	r0, Z
    1a4c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a4e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a50:	01 96       	adiw	r24, 0x01	; 1
    1a52:	9b 87       	std	Y+11, r25	; 0x0b
    1a54:	8a 87       	std	Y+10, r24	; 0x0a
    1a56:	e8 85       	ldd	r30, Y+8	; 0x08
    1a58:	f9 85       	ldd	r31, Y+9	; 0x09
    1a5a:	00 82       	st	Z, r0
    1a5c:	88 85       	ldd	r24, Y+8	; 0x08
    1a5e:	99 85       	ldd	r25, Y+9	; 0x09
    1a60:	01 96       	adiw	r24, 0x01	; 1
    1a62:	99 87       	std	Y+9, r25	; 0x09
    1a64:	88 87       	std	Y+8, r24	; 0x08
    1a66:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a68:	91 50       	subi	r25, 0x01	; 1
    1a6a:	9c 87       	std	Y+12, r25	; 0x0c
    1a6c:	ec 85       	ldd	r30, Y+12	; 0x0c
    1a6e:	ee 23       	and	r30, r30
    1a70:	51 f7       	brne	.-44     	; 0x1a46 <delaySeconds+0x32>

	TIMER1_init(&timer1Config);
    1a72:	ce 01       	movw	r24, r28
    1a74:	01 96       	adiw	r24, 0x01	; 1
    1a76:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <TIMER1_init>
	while(g_sec < sec);
    1a7a:	90 91 7a 01 	lds	r25, 0x017A
    1a7e:	8f 81       	ldd	r24, Y+7	; 0x07
    1a80:	98 17       	cp	r25, r24
    1a82:	d8 f3       	brcs	.-10     	; 0x1a7a <delaySeconds+0x66>
	g_sec = 0;
    1a84:	10 92 7a 01 	sts	0x017A, r1
	TIMER1_deInit();
    1a88:	0e 94 57 0e 	call	0x1cae	; 0x1cae <TIMER1_deInit>

}
    1a8c:	2c 96       	adiw	r28, 0x0c	; 12
    1a8e:	0f b6       	in	r0, 0x3f	; 63
    1a90:	f8 94       	cli
    1a92:	de bf       	out	0x3e, r29	; 62
    1a94:	0f be       	out	0x3f, r0	; 63
    1a96:	cd bf       	out	0x3d, r28	; 61
    1a98:	cf 91       	pop	r28
    1a9a:	df 91       	pop	r29
    1a9c:	08 95       	ret

00001a9e <countSec>:
/*
 * Description :
 * A function that increase our global variable each second
 */
void countSec(void)
{
    1a9e:	df 93       	push	r29
    1aa0:	cf 93       	push	r28
    1aa2:	cd b7       	in	r28, 0x3d	; 61
    1aa4:	de b7       	in	r29, 0x3e	; 62
	g_sec++;
    1aa6:	80 91 7a 01 	lds	r24, 0x017A
    1aaa:	8f 5f       	subi	r24, 0xFF	; 255
    1aac:	80 93 7a 01 	sts	0x017A, r24
}
    1ab0:	cf 91       	pop	r28
    1ab2:	df 91       	pop	r29
    1ab4:	08 95       	ret

00001ab6 <PWM_Timer0_Start>:

#include "pwm.h"
#include "avr/io.h"

 void PWM_Timer0_Start(uint8 duty_cycle)
 {
    1ab6:	0f 93       	push	r16
    1ab8:	1f 93       	push	r17
    1aba:	df 93       	push	r29
    1abc:	cf 93       	push	r28
    1abe:	0f 92       	push	r0
    1ac0:	cd b7       	in	r28, 0x3d	; 61
    1ac2:	de b7       	in	r29, 0x3e	; 62
    1ac4:	89 83       	std	Y+1, r24	; 0x01
		TCNT0 = 0; //Set Timer Initial value
    1ac6:	e2 e5       	ldi	r30, 0x52	; 82
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	10 82       	st	Z, r1
		if(duty_cycle==0) // Set Compare Value
    1acc:	89 81       	ldd	r24, Y+1	; 0x01
    1ace:	88 23       	and	r24, r24
    1ad0:	21 f4       	brne	.+8      	; 0x1ada <PWM_Timer0_Start+0x24>
		{
			OCR0  = 0;
    1ad2:	ec e5       	ldi	r30, 0x5C	; 92
    1ad4:	f0 e0       	ldi	r31, 0x00	; 0
    1ad6:	10 82       	st	Z, r1
    1ad8:	2b c0       	rjmp	.+86     	; 0x1b30 <PWM_Timer0_Start+0x7a>
		}
		else
		{
			OCR0  = (duty_cycle*2.56)-1;
    1ada:	0c e5       	ldi	r16, 0x5C	; 92
    1adc:	10 e0       	ldi	r17, 0x00	; 0
    1ade:	89 81       	ldd	r24, Y+1	; 0x01
    1ae0:	88 2f       	mov	r24, r24
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	aa 27       	eor	r26, r26
    1ae6:	97 fd       	sbrc	r25, 7
    1ae8:	a0 95       	com	r26
    1aea:	ba 2f       	mov	r27, r26
    1aec:	bc 01       	movw	r22, r24
    1aee:	cd 01       	movw	r24, r26
    1af0:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    1af4:	dc 01       	movw	r26, r24
    1af6:	cb 01       	movw	r24, r22
    1af8:	bc 01       	movw	r22, r24
    1afa:	cd 01       	movw	r24, r26
    1afc:	2a e0       	ldi	r18, 0x0A	; 10
    1afe:	37 ed       	ldi	r19, 0xD7	; 215
    1b00:	43 e2       	ldi	r20, 0x23	; 35
    1b02:	50 e4       	ldi	r21, 0x40	; 64
    1b04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b08:	dc 01       	movw	r26, r24
    1b0a:	cb 01       	movw	r24, r22
    1b0c:	bc 01       	movw	r22, r24
    1b0e:	cd 01       	movw	r24, r26
    1b10:	20 e0       	ldi	r18, 0x00	; 0
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	40 e8       	ldi	r20, 0x80	; 128
    1b16:	5f e3       	ldi	r21, 0x3F	; 63
    1b18:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1b1c:	dc 01       	movw	r26, r24
    1b1e:	cb 01       	movw	r24, r22
    1b20:	bc 01       	movw	r22, r24
    1b22:	cd 01       	movw	r24, r26
    1b24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b28:	dc 01       	movw	r26, r24
    1b2a:	cb 01       	movw	r24, r22
    1b2c:	f8 01       	movw	r30, r16
    1b2e:	80 83       	st	Z, r24
		}
		DDRB  = DDRB | (1<<PB3); //set PB3/OC0 as output pin --> pin where the PWM signal is generated from MC.
    1b30:	a7 e3       	ldi	r26, 0x37	; 55
    1b32:	b0 e0       	ldi	r27, 0x00	; 0
    1b34:	e7 e3       	ldi	r30, 0x37	; 55
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	80 81       	ld	r24, Z
    1b3a:	88 60       	ori	r24, 0x08	; 8
    1b3c:	8c 93       	st	X, r24
		 * 1. Fast PWM mode FOC0=0
		 * 2. Fast PWM Mode WGM01=1 & WGM00=1
		 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
		 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
		 */
		TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    1b3e:	e3 e5       	ldi	r30, 0x53	; 83
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	8a e6       	ldi	r24, 0x6A	; 106
    1b44:	80 83       	st	Z, r24
 }
    1b46:	0f 90       	pop	r0
    1b48:	cf 91       	pop	r28
    1b4a:	df 91       	pop	r29
    1b4c:	1f 91       	pop	r17
    1b4e:	0f 91       	pop	r16
    1b50:	08 95       	ret

00001b52 <__vector_9>:

/****************************Functions and ISRs*********************************/

/* Normal mode ISR */
ISR(TIMER1_OVF_vect)
{
    1b52:	1f 92       	push	r1
    1b54:	0f 92       	push	r0
    1b56:	0f b6       	in	r0, 0x3f	; 63
    1b58:	0f 92       	push	r0
    1b5a:	11 24       	eor	r1, r1
    1b5c:	2f 93       	push	r18
    1b5e:	3f 93       	push	r19
    1b60:	4f 93       	push	r20
    1b62:	5f 93       	push	r21
    1b64:	6f 93       	push	r22
    1b66:	7f 93       	push	r23
    1b68:	8f 93       	push	r24
    1b6a:	9f 93       	push	r25
    1b6c:	af 93       	push	r26
    1b6e:	bf 93       	push	r27
    1b70:	ef 93       	push	r30
    1b72:	ff 93       	push	r31
    1b74:	df 93       	push	r29
    1b76:	cf 93       	push	r28
    1b78:	cd b7       	in	r28, 0x3d	; 61
    1b7a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1b7c:	80 91 80 01 	lds	r24, 0x0180
    1b80:	90 91 81 01 	lds	r25, 0x0181
    1b84:	00 97       	sbiw	r24, 0x00	; 0
    1b86:	29 f0       	breq	.+10     	; 0x1b92 <__vector_9+0x40>
	{
		(*g_callBackPtr)();
    1b88:	e0 91 80 01 	lds	r30, 0x0180
    1b8c:	f0 91 81 01 	lds	r31, 0x0181
    1b90:	09 95       	icall
	}
}
    1b92:	cf 91       	pop	r28
    1b94:	df 91       	pop	r29
    1b96:	ff 91       	pop	r31
    1b98:	ef 91       	pop	r30
    1b9a:	bf 91       	pop	r27
    1b9c:	af 91       	pop	r26
    1b9e:	9f 91       	pop	r25
    1ba0:	8f 91       	pop	r24
    1ba2:	7f 91       	pop	r23
    1ba4:	6f 91       	pop	r22
    1ba6:	5f 91       	pop	r21
    1ba8:	4f 91       	pop	r20
    1baa:	3f 91       	pop	r19
    1bac:	2f 91       	pop	r18
    1bae:	0f 90       	pop	r0
    1bb0:	0f be       	out	0x3f, r0	; 63
    1bb2:	0f 90       	pop	r0
    1bb4:	1f 90       	pop	r1
    1bb6:	18 95       	reti

00001bb8 <__vector_7>:

/* Compare mode ISR */
ISR(TIMER1_COMPA_vect)
{
    1bb8:	1f 92       	push	r1
    1bba:	0f 92       	push	r0
    1bbc:	0f b6       	in	r0, 0x3f	; 63
    1bbe:	0f 92       	push	r0
    1bc0:	11 24       	eor	r1, r1
    1bc2:	2f 93       	push	r18
    1bc4:	3f 93       	push	r19
    1bc6:	4f 93       	push	r20
    1bc8:	5f 93       	push	r21
    1bca:	6f 93       	push	r22
    1bcc:	7f 93       	push	r23
    1bce:	8f 93       	push	r24
    1bd0:	9f 93       	push	r25
    1bd2:	af 93       	push	r26
    1bd4:	bf 93       	push	r27
    1bd6:	ef 93       	push	r30
    1bd8:	ff 93       	push	r31
    1bda:	df 93       	push	r29
    1bdc:	cf 93       	push	r28
    1bde:	cd b7       	in	r28, 0x3d	; 61
    1be0:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1be2:	80 91 80 01 	lds	r24, 0x0180
    1be6:	90 91 81 01 	lds	r25, 0x0181
    1bea:	00 97       	sbiw	r24, 0x00	; 0
    1bec:	29 f0       	breq	.+10     	; 0x1bf8 <__vector_7+0x40>
	{
		(*g_callBackPtr)();
    1bee:	e0 91 80 01 	lds	r30, 0x0180
    1bf2:	f0 91 81 01 	lds	r31, 0x0181
    1bf6:	09 95       	icall
	}
}
    1bf8:	cf 91       	pop	r28
    1bfa:	df 91       	pop	r29
    1bfc:	ff 91       	pop	r31
    1bfe:	ef 91       	pop	r30
    1c00:	bf 91       	pop	r27
    1c02:	af 91       	pop	r26
    1c04:	9f 91       	pop	r25
    1c06:	8f 91       	pop	r24
    1c08:	7f 91       	pop	r23
    1c0a:	6f 91       	pop	r22
    1c0c:	5f 91       	pop	r21
    1c0e:	4f 91       	pop	r20
    1c10:	3f 91       	pop	r19
    1c12:	2f 91       	pop	r18
    1c14:	0f 90       	pop	r0
    1c16:	0f be       	out	0x3f, r0	; 63
    1c18:	0f 90       	pop	r0
    1c1a:	1f 90       	pop	r1
    1c1c:	18 95       	reti

00001c1e <TIMER1_init>:
/*
 * Description :
 * A function to initialize the timer
 */
void TIMER1_init(const Timer1_ConfigType* config_ptr)
{
    1c1e:	df 93       	push	r29
    1c20:	cf 93       	push	r28
    1c22:	00 d0       	rcall	.+0      	; 0x1c24 <TIMER1_init+0x6>
    1c24:	cd b7       	in	r28, 0x3d	; 61
    1c26:	de b7       	in	r29, 0x3e	; 62
    1c28:	9a 83       	std	Y+2, r25	; 0x02
    1c2a:	89 83       	std	Y+1, r24	; 0x01
	 * For TCCR1A register : -
	 * non-pwm mode so FOC1A and FOC2A = 1
	 * in case of compare and normal mode , WGM11 & WGM10 & WGM13 = 0
	 * but only WGM12 = 1 in case of compare and equal to 0 in case of normal mode
	 */
	TCCR1A = ( 1 << FOC1A ) | ( 1 << FOC1B );
    1c2c:	ef e4       	ldi	r30, 0x4F	; 79
    1c2e:	f0 e0       	ldi	r31, 0x00	; 0
    1c30:	8c e0       	ldi	r24, 0x0C	; 12
    1c32:	80 83       	st	Z, r24
	/*
	 * For TCCR1B register : -
	 * WGM12 = 1 -> Compare mode or 0 -> Normal mode
	 * CS12 : CS10 = prescaler value
	 */
	TCCR1B = ( config_ptr -> prescaler ) | ( ( config_ptr -> mode ) << WGM12 );
    1c34:	ae e4       	ldi	r26, 0x4E	; 78
    1c36:	b0 e0       	ldi	r27, 0x00	; 0
    1c38:	e9 81       	ldd	r30, Y+1	; 0x01
    1c3a:	fa 81       	ldd	r31, Y+2	; 0x02
    1c3c:	84 81       	ldd	r24, Z+4	; 0x04
    1c3e:	28 2f       	mov	r18, r24
    1c40:	e9 81       	ldd	r30, Y+1	; 0x01
    1c42:	fa 81       	ldd	r31, Y+2	; 0x02
    1c44:	85 81       	ldd	r24, Z+5	; 0x05
    1c46:	88 2f       	mov	r24, r24
    1c48:	90 e0       	ldi	r25, 0x00	; 0
    1c4a:	88 0f       	add	r24, r24
    1c4c:	99 1f       	adc	r25, r25
    1c4e:	88 0f       	add	r24, r24
    1c50:	99 1f       	adc	r25, r25
    1c52:	88 0f       	add	r24, r24
    1c54:	99 1f       	adc	r25, r25
    1c56:	82 2b       	or	r24, r18
    1c58:	8c 93       	st	X, r24
	/*
	 * OCR1A and TCNT1 and TIMASK registers configurations : -
	 */

	/*Timer works in compare mode*/
	if(config_ptr->mode==COMPARE)
    1c5a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c5c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c5e:	85 81       	ldd	r24, Z+5	; 0x05
    1c60:	81 30       	cpi	r24, 0x01	; 1
    1c62:	71 f4       	brne	.+28     	; 0x1c80 <TIMER1_init+0x62>
	{
		/*
		 * For OCR1A register : -
		 * we put the max compare mode value here in case of compare mode only
		 */
		OCR1A = config_ptr -> compare_value;
    1c64:	aa e4       	ldi	r26, 0x4A	; 74
    1c66:	b0 e0       	ldi	r27, 0x00	; 0
    1c68:	e9 81       	ldd	r30, Y+1	; 0x01
    1c6a:	fa 81       	ldd	r31, Y+2	; 0x02
    1c6c:	82 81       	ldd	r24, Z+2	; 0x02
    1c6e:	93 81       	ldd	r25, Z+3	; 0x03
    1c70:	11 96       	adiw	r26, 0x01	; 1
    1c72:	9c 93       	st	X, r25
    1c74:	8e 93       	st	-X, r24

		/*
		 * For TIMSK register : -
		 * we enable compare mode (A) interrupt
		 */
		TIMSK=(1<<OCIE1A);
    1c76:	e9 e5       	ldi	r30, 0x59	; 89
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	80 e1       	ldi	r24, 0x10	; 16
    1c7c:	80 83       	st	Z, r24
    1c7e:	12 c0       	rjmp	.+36     	; 0x1ca4 <TIMER1_init+0x86>
	}

	/*Timer works in Normal mode*/
	else if(config_ptr->mode==NORMAL)
    1c80:	e9 81       	ldd	r30, Y+1	; 0x01
    1c82:	fa 81       	ldd	r31, Y+2	; 0x02
    1c84:	85 81       	ldd	r24, Z+5	; 0x05
    1c86:	88 23       	and	r24, r24
    1c88:	69 f4       	brne	.+26     	; 0x1ca4 <TIMER1_init+0x86>
	{
		/*
		 * For TCNT1 register : -
		 * we put the initial counter value here
		 */
		TCNT1 = config_ptr -> initial_value;
    1c8a:	ac e4       	ldi	r26, 0x4C	; 76
    1c8c:	b0 e0       	ldi	r27, 0x00	; 0
    1c8e:	e9 81       	ldd	r30, Y+1	; 0x01
    1c90:	fa 81       	ldd	r31, Y+2	; 0x02
    1c92:	80 81       	ld	r24, Z
    1c94:	91 81       	ldd	r25, Z+1	; 0x01
    1c96:	11 96       	adiw	r26, 0x01	; 1
    1c98:	9c 93       	st	X, r25
    1c9a:	8e 93       	st	-X, r24

		/*
		 * For TIMSK register : -
		 * we enable Normal mode interrupt
		 */
		TIMSK = ( 1 << TOIE1 );
    1c9c:	e9 e5       	ldi	r30, 0x59	; 89
    1c9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ca0:	84 e0       	ldi	r24, 0x04	; 4
    1ca2:	80 83       	st	Z, r24
	}
}
    1ca4:	0f 90       	pop	r0
    1ca6:	0f 90       	pop	r0
    1ca8:	cf 91       	pop	r28
    1caa:	df 91       	pop	r29
    1cac:	08 95       	ret

00001cae <TIMER1_deInit>:
/*
 * Description :
 * A function to disable the timer
 */
void TIMER1_deInit(void)
{
    1cae:	df 93       	push	r29
    1cb0:	cf 93       	push	r28
    1cb2:	cd b7       	in	r28, 0x3d	; 61
    1cb4:	de b7       	in	r29, 0x3e	; 62
	/* clear all registers */
	TCCR1A = TCCR1B = TIMSK = TCNT1 = OCR1A = 0;
    1cb6:	6f e4       	ldi	r22, 0x4F	; 79
    1cb8:	70 e0       	ldi	r23, 0x00	; 0
    1cba:	4e e4       	ldi	r20, 0x4E	; 78
    1cbc:	50 e0       	ldi	r21, 0x00	; 0
    1cbe:	29 e5       	ldi	r18, 0x59	; 89
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	ac e4       	ldi	r26, 0x4C	; 76
    1cc4:	b0 e0       	ldi	r27, 0x00	; 0
    1cc6:	ea e4       	ldi	r30, 0x4A	; 74
    1cc8:	f0 e0       	ldi	r31, 0x00	; 0
    1cca:	11 82       	std	Z+1, r1	; 0x01
    1ccc:	10 82       	st	Z, r1
    1cce:	80 81       	ld	r24, Z
    1cd0:	91 81       	ldd	r25, Z+1	; 0x01
    1cd2:	11 96       	adiw	r26, 0x01	; 1
    1cd4:	9c 93       	st	X, r25
    1cd6:	8e 93       	st	-X, r24
    1cd8:	8d 91       	ld	r24, X+
    1cda:	9c 91       	ld	r25, X
    1cdc:	11 97       	sbiw	r26, 0x01	; 1
    1cde:	f9 01       	movw	r30, r18
    1ce0:	80 83       	st	Z, r24
    1ce2:	f9 01       	movw	r30, r18
    1ce4:	80 81       	ld	r24, Z
    1ce6:	fa 01       	movw	r30, r20
    1ce8:	80 83       	st	Z, r24
    1cea:	fa 01       	movw	r30, r20
    1cec:	80 81       	ld	r24, Z
    1cee:	fb 01       	movw	r30, r22
    1cf0:	80 83       	st	Z, r24
}
    1cf2:	cf 91       	pop	r28
    1cf4:	df 91       	pop	r29
    1cf6:	08 95       	ret

00001cf8 <TIMER1_setCallBack>:
/*
 * Description : -
 * A function to set callback function
 */
void TIMER1_setCallBack(void ( *a_ptr ) ( void ))
{
    1cf8:	df 93       	push	r29
    1cfa:	cf 93       	push	r28
    1cfc:	00 d0       	rcall	.+0      	; 0x1cfe <TIMER1_setCallBack+0x6>
    1cfe:	cd b7       	in	r28, 0x3d	; 61
    1d00:	de b7       	in	r29, 0x3e	; 62
    1d02:	9a 83       	std	Y+2, r25	; 0x02
    1d04:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = (volatile void (*)(void))a_ptr;
    1d06:	89 81       	ldd	r24, Y+1	; 0x01
    1d08:	9a 81       	ldd	r25, Y+2	; 0x02
    1d0a:	90 93 81 01 	sts	0x0181, r25
    1d0e:	80 93 80 01 	sts	0x0180, r24

}
    1d12:	0f 90       	pop	r0
    1d14:	0f 90       	pop	r0
    1d16:	cf 91       	pop	r28
    1d18:	df 91       	pop	r29
    1d1a:	08 95       	ret

00001d1c <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    1d1c:	df 93       	push	r29
    1d1e:	cf 93       	push	r28
    1d20:	00 d0       	rcall	.+0      	; 0x1d22 <TWI_init+0x6>
    1d22:	cd b7       	in	r28, 0x3d	; 61
    1d24:	de b7       	in	r29, 0x3e	; 62
    1d26:	9a 83       	std	Y+2, r25	; 0x02
    1d28:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: pre-scaler this number between 0 --> 3 to TWPS and F_CPU=8Mhz  */
    TWBR = 0x02;
    1d2a:	e0 e2       	ldi	r30, 0x20	; 32
    1d2c:	f0 e0       	ldi	r31, 0x00	; 0
    1d2e:	82 e0       	ldi	r24, 0x02	; 2
    1d30:	80 83       	st	Z, r24
	TWSR |= (Config_Ptr->bit_rate & 0x03 );
    1d32:	a1 e2       	ldi	r26, 0x21	; 33
    1d34:	b0 e0       	ldi	r27, 0x00	; 0
    1d36:	e1 e2       	ldi	r30, 0x21	; 33
    1d38:	f0 e0       	ldi	r31, 0x00	; 0
    1d3a:	80 81       	ld	r24, Z
    1d3c:	98 2f       	mov	r25, r24
    1d3e:	e9 81       	ldd	r30, Y+1	; 0x01
    1d40:	fa 81       	ldd	r31, Y+2	; 0x02
    1d42:	81 81       	ldd	r24, Z+1	; 0x01
    1d44:	83 70       	andi	r24, 0x03	; 3
    1d46:	89 2b       	or	r24, r25
    1d48:	8c 93       	st	X, r24
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = Config_Ptr->address; // my address = 0x01 :)
    1d4a:	a2 e2       	ldi	r26, 0x22	; 34
    1d4c:	b0 e0       	ldi	r27, 0x00	; 0
    1d4e:	e9 81       	ldd	r30, Y+1	; 0x01
    1d50:	fa 81       	ldd	r31, Y+2	; 0x02
    1d52:	80 81       	ld	r24, Z
    1d54:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    1d56:	e6 e5       	ldi	r30, 0x56	; 86
    1d58:	f0 e0       	ldi	r31, 0x00	; 0
    1d5a:	84 e0       	ldi	r24, 0x04	; 4
    1d5c:	80 83       	st	Z, r24
}
    1d5e:	0f 90       	pop	r0
    1d60:	0f 90       	pop	r0
    1d62:	cf 91       	pop	r28
    1d64:	df 91       	pop	r29
    1d66:	08 95       	ret

00001d68 <TWI_start>:

void TWI_start(void)
{
    1d68:	df 93       	push	r29
    1d6a:	cf 93       	push	r28
    1d6c:	cd b7       	in	r28, 0x3d	; 61
    1d6e:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1d70:	e6 e5       	ldi	r30, 0x56	; 86
    1d72:	f0 e0       	ldi	r31, 0x00	; 0
    1d74:	84 ea       	ldi	r24, 0xA4	; 164
    1d76:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1d78:	e6 e5       	ldi	r30, 0x56	; 86
    1d7a:	f0 e0       	ldi	r31, 0x00	; 0
    1d7c:	80 81       	ld	r24, Z
    1d7e:	88 23       	and	r24, r24
    1d80:	dc f7       	brge	.-10     	; 0x1d78 <TWI_start+0x10>
}
    1d82:	cf 91       	pop	r28
    1d84:	df 91       	pop	r29
    1d86:	08 95       	ret

00001d88 <TWI_stop>:

void TWI_stop(void)
{
    1d88:	df 93       	push	r29
    1d8a:	cf 93       	push	r28
    1d8c:	cd b7       	in	r28, 0x3d	; 61
    1d8e:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1d90:	e6 e5       	ldi	r30, 0x56	; 86
    1d92:	f0 e0       	ldi	r31, 0x00	; 0
    1d94:	84 e9       	ldi	r24, 0x94	; 148
    1d96:	80 83       	st	Z, r24
}
    1d98:	cf 91       	pop	r28
    1d9a:	df 91       	pop	r29
    1d9c:	08 95       	ret

00001d9e <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    1d9e:	df 93       	push	r29
    1da0:	cf 93       	push	r28
    1da2:	0f 92       	push	r0
    1da4:	cd b7       	in	r28, 0x3d	; 61
    1da6:	de b7       	in	r29, 0x3e	; 62
    1da8:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    1daa:	e3 e2       	ldi	r30, 0x23	; 35
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
    1dae:	89 81       	ldd	r24, Y+1	; 0x01
    1db0:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    1db2:	e6 e5       	ldi	r30, 0x56	; 86
    1db4:	f0 e0       	ldi	r31, 0x00	; 0
    1db6:	84 e8       	ldi	r24, 0x84	; 132
    1db8:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1dba:	e6 e5       	ldi	r30, 0x56	; 86
    1dbc:	f0 e0       	ldi	r31, 0x00	; 0
    1dbe:	80 81       	ld	r24, Z
    1dc0:	88 23       	and	r24, r24
    1dc2:	dc f7       	brge	.-10     	; 0x1dba <TWI_writeByte+0x1c>
}
    1dc4:	0f 90       	pop	r0
    1dc6:	cf 91       	pop	r28
    1dc8:	df 91       	pop	r29
    1dca:	08 95       	ret

00001dcc <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    1dcc:	df 93       	push	r29
    1dce:	cf 93       	push	r28
    1dd0:	cd b7       	in	r28, 0x3d	; 61
    1dd2:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1dd4:	e6 e5       	ldi	r30, 0x56	; 86
    1dd6:	f0 e0       	ldi	r31, 0x00	; 0
    1dd8:	84 ec       	ldi	r24, 0xC4	; 196
    1dda:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1ddc:	e6 e5       	ldi	r30, 0x56	; 86
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	80 81       	ld	r24, Z
    1de2:	88 23       	and	r24, r24
    1de4:	dc f7       	brge	.-10     	; 0x1ddc <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    1de6:	e3 e2       	ldi	r30, 0x23	; 35
    1de8:	f0 e0       	ldi	r31, 0x00	; 0
    1dea:	80 81       	ld	r24, Z
}
    1dec:	cf 91       	pop	r28
    1dee:	df 91       	pop	r29
    1df0:	08 95       	ret

00001df2 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    1df2:	df 93       	push	r29
    1df4:	cf 93       	push	r28
    1df6:	cd b7       	in	r28, 0x3d	; 61
    1df8:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1dfa:	e6 e5       	ldi	r30, 0x56	; 86
    1dfc:	f0 e0       	ldi	r31, 0x00	; 0
    1dfe:	84 e8       	ldi	r24, 0x84	; 132
    1e00:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1e02:	e6 e5       	ldi	r30, 0x56	; 86
    1e04:	f0 e0       	ldi	r31, 0x00	; 0
    1e06:	80 81       	ld	r24, Z
    1e08:	88 23       	and	r24, r24
    1e0a:	dc f7       	brge	.-10     	; 0x1e02 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    1e0c:	e3 e2       	ldi	r30, 0x23	; 35
    1e0e:	f0 e0       	ldi	r31, 0x00	; 0
    1e10:	80 81       	ld	r24, Z
}
    1e12:	cf 91       	pop	r28
    1e14:	df 91       	pop	r29
    1e16:	08 95       	ret

00001e18 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    1e18:	df 93       	push	r29
    1e1a:	cf 93       	push	r28
    1e1c:	0f 92       	push	r0
    1e1e:	cd b7       	in	r28, 0x3d	; 61
    1e20:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    1e22:	e1 e2       	ldi	r30, 0x21	; 33
    1e24:	f0 e0       	ldi	r31, 0x00	; 0
    1e26:	80 81       	ld	r24, Z
    1e28:	88 7f       	andi	r24, 0xF8	; 248
    1e2a:	89 83       	std	Y+1, r24	; 0x01
    return status;
    1e2c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e2e:	0f 90       	pop	r0
    1e30:	cf 91       	pop	r28
    1e32:	df 91       	pop	r29
    1e34:	08 95       	ret

00001e36 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    1e36:	df 93       	push	r29
    1e38:	cf 93       	push	r28
    1e3a:	00 d0       	rcall	.+0      	; 0x1e3c <UART_init+0x6>
    1e3c:	00 d0       	rcall	.+0      	; 0x1e3e <UART_init+0x8>
    1e3e:	cd b7       	in	r28, 0x3d	; 61
    1e40:	de b7       	in	r29, 0x3e	; 62
    1e42:	9c 83       	std	Y+4, r25	; 0x04
    1e44:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    1e46:	1a 82       	std	Y+2, r1	; 0x02
    1e48:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    1e4a:	eb e2       	ldi	r30, 0x2B	; 43
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	82 e0       	ldi	r24, 0x02	; 2
    1e50:	80 83       	st	Z, r24
	 * TXCIE = 0 Disable USART Tx Complete Interrupt Enable
	 * UDRIE = 0 Disable USART Data Register Empty Interrupt Enable
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 ***********************************************************************/
	UCSRB =(1<<RXEN) | (1<<TXEN);
    1e52:	ea e2       	ldi	r30, 0x2A	; 42
    1e54:	f0 e0       	ldi	r31, 0x00	; 0
    1e56:	88 e1       	ldi	r24, 0x18	; 24
    1e58:	80 83       	st	Z, r24
	// get bit 3 for we put in UCSZ2 and this one bit only bit number four in Config_Ptr bit_data
	UCSRB |= ( Config_Ptr->bit_data & 0x04) ;
    1e5a:	aa e2       	ldi	r26, 0x2A	; 42
    1e5c:	b0 e0       	ldi	r27, 0x00	; 0
    1e5e:	ea e2       	ldi	r30, 0x2A	; 42
    1e60:	f0 e0       	ldi	r31, 0x00	; 0
    1e62:	80 81       	ld	r24, Z
    1e64:	98 2f       	mov	r25, r24
    1e66:	eb 81       	ldd	r30, Y+3	; 0x03
    1e68:	fc 81       	ldd	r31, Y+4	; 0x04
    1e6a:	80 81       	ld	r24, Z
    1e6c:	84 70       	andi	r24, 0x04	; 4
    1e6e:	89 2b       	or	r24, r25
    1e70:	8c 93       	st	X, r24
	/************************** UCSRC Description **************************
	 * URSEL   = 1 The URSEL must be one when writing the UCSRC
	 * UMSEL   = 0 Asynchronous Operation
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC |= (1<<URSEL);
    1e72:	a0 e4       	ldi	r26, 0x40	; 64
    1e74:	b0 e0       	ldi	r27, 0x00	; 0
    1e76:	e0 e4       	ldi	r30, 0x40	; 64
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	80 81       	ld	r24, Z
    1e7c:	80 68       	ori	r24, 0x80	; 128
    1e7e:	8c 93       	st	X, r24

	// UCSZ1:0  get two bit from bit_data  for we put in UCSZ1:0 and number between 0-->3
	UCSRC |= ((Config_Ptr->bit_data & 0x03) << 1 ); // 0b00000000
    1e80:	a0 e4       	ldi	r26, 0x40	; 64
    1e82:	b0 e0       	ldi	r27, 0x00	; 0
    1e84:	e0 e4       	ldi	r30, 0x40	; 64
    1e86:	f0 e0       	ldi	r31, 0x00	; 0
    1e88:	80 81       	ld	r24, Z
    1e8a:	28 2f       	mov	r18, r24
    1e8c:	eb 81       	ldd	r30, Y+3	; 0x03
    1e8e:	fc 81       	ldd	r31, Y+4	; 0x04
    1e90:	80 81       	ld	r24, Z
    1e92:	88 2f       	mov	r24, r24
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	83 70       	andi	r24, 0x03	; 3
    1e98:	90 70       	andi	r25, 0x00	; 0
    1e9a:	88 0f       	add	r24, r24
    1e9c:	99 1f       	adc	r25, r25
    1e9e:	82 2b       	or	r24, r18
    1ea0:	8c 93       	st	X, r24

   // USBS  stop bit 0 or 1
	UCSRC |= ( (Config_Ptr->stop_bit & 0x01) << 3 );
    1ea2:	a0 e4       	ldi	r26, 0x40	; 64
    1ea4:	b0 e0       	ldi	r27, 0x00	; 0
    1ea6:	e0 e4       	ldi	r30, 0x40	; 64
    1ea8:	f0 e0       	ldi	r31, 0x00	; 0
    1eaa:	80 81       	ld	r24, Z
    1eac:	28 2f       	mov	r18, r24
    1eae:	eb 81       	ldd	r30, Y+3	; 0x03
    1eb0:	fc 81       	ldd	r31, Y+4	; 0x04
    1eb2:	82 81       	ldd	r24, Z+2	; 0x02
    1eb4:	88 2f       	mov	r24, r24
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	81 70       	andi	r24, 0x01	; 1
    1eba:	90 70       	andi	r25, 0x00	; 0
    1ebc:	88 0f       	add	r24, r24
    1ebe:	99 1f       	adc	r25, r25
    1ec0:	88 0f       	add	r24, r24
    1ec2:	99 1f       	adc	r25, r25
    1ec4:	88 0f       	add	r24, r24
    1ec6:	99 1f       	adc	r25, r25
    1ec8:	82 2b       	or	r24, r18
    1eca:	8c 93       	st	X, r24

	//   UPM1:0  parity bit
	UCSRC |=( (Config_Ptr->parity & 0x03) << 4 );
    1ecc:	a0 e4       	ldi	r26, 0x40	; 64
    1ece:	b0 e0       	ldi	r27, 0x00	; 0
    1ed0:	e0 e4       	ldi	r30, 0x40	; 64
    1ed2:	f0 e0       	ldi	r31, 0x00	; 0
    1ed4:	80 81       	ld	r24, Z
    1ed6:	28 2f       	mov	r18, r24
    1ed8:	eb 81       	ldd	r30, Y+3	; 0x03
    1eda:	fc 81       	ldd	r31, Y+4	; 0x04
    1edc:	81 81       	ldd	r24, Z+1	; 0x01
    1ede:	88 2f       	mov	r24, r24
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	83 70       	andi	r24, 0x03	; 3
    1ee4:	90 70       	andi	r25, 0x00	; 0
    1ee6:	82 95       	swap	r24
    1ee8:	92 95       	swap	r25
    1eea:	90 7f       	andi	r25, 0xF0	; 240
    1eec:	98 27       	eor	r25, r24
    1eee:	80 7f       	andi	r24, 0xF0	; 240
    1ef0:	98 27       	eor	r25, r24
    1ef2:	82 2b       	or	r24, r18
    1ef4:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate)  * 8UL))) - 1);
    1ef6:	eb 81       	ldd	r30, Y+3	; 0x03
    1ef8:	fc 81       	ldd	r31, Y+4	; 0x04
    1efa:	83 81       	ldd	r24, Z+3	; 0x03
    1efc:	94 81       	ldd	r25, Z+4	; 0x04
    1efe:	a5 81       	ldd	r26, Z+5	; 0x05
    1f00:	b6 81       	ldd	r27, Z+6	; 0x06
    1f02:	88 0f       	add	r24, r24
    1f04:	99 1f       	adc	r25, r25
    1f06:	aa 1f       	adc	r26, r26
    1f08:	bb 1f       	adc	r27, r27
    1f0a:	88 0f       	add	r24, r24
    1f0c:	99 1f       	adc	r25, r25
    1f0e:	aa 1f       	adc	r26, r26
    1f10:	bb 1f       	adc	r27, r27
    1f12:	88 0f       	add	r24, r24
    1f14:	99 1f       	adc	r25, r25
    1f16:	aa 1f       	adc	r26, r26
    1f18:	bb 1f       	adc	r27, r27
    1f1a:	9c 01       	movw	r18, r24
    1f1c:	ad 01       	movw	r20, r26
    1f1e:	80 e0       	ldi	r24, 0x00	; 0
    1f20:	92 e1       	ldi	r25, 0x12	; 18
    1f22:	aa e7       	ldi	r26, 0x7A	; 122
    1f24:	b0 e0       	ldi	r27, 0x00	; 0
    1f26:	bc 01       	movw	r22, r24
    1f28:	cd 01       	movw	r24, r26
    1f2a:	0e 94 40 10 	call	0x2080	; 0x2080 <__udivmodsi4>
    1f2e:	da 01       	movw	r26, r20
    1f30:	c9 01       	movw	r24, r18
    1f32:	01 97       	sbiw	r24, 0x01	; 1
    1f34:	9a 83       	std	Y+2, r25	; 0x02
    1f36:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    1f38:	e0 e4       	ldi	r30, 0x40	; 64
    1f3a:	f0 e0       	ldi	r31, 0x00	; 0
    1f3c:	89 81       	ldd	r24, Y+1	; 0x01
    1f3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f40:	89 2f       	mov	r24, r25
    1f42:	99 27       	eor	r25, r25
    1f44:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    1f46:	e9 e2       	ldi	r30, 0x29	; 41
    1f48:	f0 e0       	ldi	r31, 0x00	; 0
    1f4a:	89 81       	ldd	r24, Y+1	; 0x01
    1f4c:	80 83       	st	Z, r24
}
    1f4e:	0f 90       	pop	r0
    1f50:	0f 90       	pop	r0
    1f52:	0f 90       	pop	r0
    1f54:	0f 90       	pop	r0
    1f56:	cf 91       	pop	r28
    1f58:	df 91       	pop	r29
    1f5a:	08 95       	ret

00001f5c <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    1f5c:	df 93       	push	r29
    1f5e:	cf 93       	push	r28
    1f60:	0f 92       	push	r0
    1f62:	cd b7       	in	r28, 0x3d	; 61
    1f64:	de b7       	in	r29, 0x3e	; 62
    1f66:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    1f68:	eb e2       	ldi	r30, 0x2B	; 43
    1f6a:	f0 e0       	ldi	r31, 0x00	; 0
    1f6c:	80 81       	ld	r24, Z
    1f6e:	88 2f       	mov	r24, r24
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	80 72       	andi	r24, 0x20	; 32
    1f74:	90 70       	andi	r25, 0x00	; 0
    1f76:	00 97       	sbiw	r24, 0x00	; 0
    1f78:	b9 f3       	breq	.-18     	; 0x1f68 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    1f7a:	ec e2       	ldi	r30, 0x2C	; 44
    1f7c:	f0 e0       	ldi	r31, 0x00	; 0
    1f7e:	89 81       	ldd	r24, Y+1	; 0x01
    1f80:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    1f82:	0f 90       	pop	r0
    1f84:	cf 91       	pop	r28
    1f86:	df 91       	pop	r29
    1f88:	08 95       	ret

00001f8a <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    1f8a:	df 93       	push	r29
    1f8c:	cf 93       	push	r28
    1f8e:	cd b7       	in	r28, 0x3d	; 61
    1f90:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    1f92:	eb e2       	ldi	r30, 0x2B	; 43
    1f94:	f0 e0       	ldi	r31, 0x00	; 0
    1f96:	80 81       	ld	r24, Z
    1f98:	88 23       	and	r24, r24
    1f9a:	dc f7       	brge	.-10     	; 0x1f92 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    1f9c:	ec e2       	ldi	r30, 0x2C	; 44
    1f9e:	f0 e0       	ldi	r31, 0x00	; 0
    1fa0:	80 81       	ld	r24, Z
}
    1fa2:	cf 91       	pop	r28
    1fa4:	df 91       	pop	r29
    1fa6:	08 95       	ret

00001fa8 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    1fa8:	df 93       	push	r29
    1faa:	cf 93       	push	r28
    1fac:	00 d0       	rcall	.+0      	; 0x1fae <UART_sendString+0x6>
    1fae:	0f 92       	push	r0
    1fb0:	cd b7       	in	r28, 0x3d	; 61
    1fb2:	de b7       	in	r29, 0x3e	; 62
    1fb4:	9b 83       	std	Y+3, r25	; 0x03
    1fb6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1fb8:	19 82       	std	Y+1, r1	; 0x01
    1fba:	0e c0       	rjmp	.+28     	; 0x1fd8 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    1fbc:	89 81       	ldd	r24, Y+1	; 0x01
    1fbe:	28 2f       	mov	r18, r24
    1fc0:	30 e0       	ldi	r19, 0x00	; 0
    1fc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc4:	9b 81       	ldd	r25, Y+3	; 0x03
    1fc6:	fc 01       	movw	r30, r24
    1fc8:	e2 0f       	add	r30, r18
    1fca:	f3 1f       	adc	r31, r19
    1fcc:	80 81       	ld	r24, Z
    1fce:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <UART_sendByte>
		i++;
    1fd2:	89 81       	ldd	r24, Y+1	; 0x01
    1fd4:	8f 5f       	subi	r24, 0xFF	; 255
    1fd6:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    1fd8:	89 81       	ldd	r24, Y+1	; 0x01
    1fda:	28 2f       	mov	r18, r24
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe0:	9b 81       	ldd	r25, Y+3	; 0x03
    1fe2:	fc 01       	movw	r30, r24
    1fe4:	e2 0f       	add	r30, r18
    1fe6:	f3 1f       	adc	r31, r19
    1fe8:	80 81       	ld	r24, Z
    1fea:	88 23       	and	r24, r24
    1fec:	39 f7       	brne	.-50     	; 0x1fbc <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    1fee:	0f 90       	pop	r0
    1ff0:	0f 90       	pop	r0
    1ff2:	0f 90       	pop	r0
    1ff4:	cf 91       	pop	r28
    1ff6:	df 91       	pop	r29
    1ff8:	08 95       	ret

00001ffa <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    1ffa:	0f 93       	push	r16
    1ffc:	1f 93       	push	r17
    1ffe:	df 93       	push	r29
    2000:	cf 93       	push	r28
    2002:	00 d0       	rcall	.+0      	; 0x2004 <UART_receiveString+0xa>
    2004:	0f 92       	push	r0
    2006:	cd b7       	in	r28, 0x3d	; 61
    2008:	de b7       	in	r29, 0x3e	; 62
    200a:	9b 83       	std	Y+3, r25	; 0x03
    200c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    200e:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2010:	89 81       	ldd	r24, Y+1	; 0x01
    2012:	28 2f       	mov	r18, r24
    2014:	30 e0       	ldi	r19, 0x00	; 0
    2016:	8a 81       	ldd	r24, Y+2	; 0x02
    2018:	9b 81       	ldd	r25, Y+3	; 0x03
    201a:	8c 01       	movw	r16, r24
    201c:	02 0f       	add	r16, r18
    201e:	13 1f       	adc	r17, r19
    2020:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <UART_recieveByte>
    2024:	f8 01       	movw	r30, r16
    2026:	80 83       	st	Z, r24
    2028:	0f c0       	rjmp	.+30     	; 0x2048 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    202a:	89 81       	ldd	r24, Y+1	; 0x01
    202c:	8f 5f       	subi	r24, 0xFF	; 255
    202e:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2030:	89 81       	ldd	r24, Y+1	; 0x01
    2032:	28 2f       	mov	r18, r24
    2034:	30 e0       	ldi	r19, 0x00	; 0
    2036:	8a 81       	ldd	r24, Y+2	; 0x02
    2038:	9b 81       	ldd	r25, Y+3	; 0x03
    203a:	8c 01       	movw	r16, r24
    203c:	02 0f       	add	r16, r18
    203e:	13 1f       	adc	r17, r19
    2040:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <UART_recieveByte>
    2044:	f8 01       	movw	r30, r16
    2046:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2048:	89 81       	ldd	r24, Y+1	; 0x01
    204a:	28 2f       	mov	r18, r24
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	8a 81       	ldd	r24, Y+2	; 0x02
    2050:	9b 81       	ldd	r25, Y+3	; 0x03
    2052:	fc 01       	movw	r30, r24
    2054:	e2 0f       	add	r30, r18
    2056:	f3 1f       	adc	r31, r19
    2058:	80 81       	ld	r24, Z
    205a:	83 32       	cpi	r24, 0x23	; 35
    205c:	31 f7       	brne	.-52     	; 0x202a <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    205e:	89 81       	ldd	r24, Y+1	; 0x01
    2060:	28 2f       	mov	r18, r24
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	8a 81       	ldd	r24, Y+2	; 0x02
    2066:	9b 81       	ldd	r25, Y+3	; 0x03
    2068:	fc 01       	movw	r30, r24
    206a:	e2 0f       	add	r30, r18
    206c:	f3 1f       	adc	r31, r19
    206e:	10 82       	st	Z, r1
}
    2070:	0f 90       	pop	r0
    2072:	0f 90       	pop	r0
    2074:	0f 90       	pop	r0
    2076:	cf 91       	pop	r28
    2078:	df 91       	pop	r29
    207a:	1f 91       	pop	r17
    207c:	0f 91       	pop	r16
    207e:	08 95       	ret

00002080 <__udivmodsi4>:
    2080:	a1 e2       	ldi	r26, 0x21	; 33
    2082:	1a 2e       	mov	r1, r26
    2084:	aa 1b       	sub	r26, r26
    2086:	bb 1b       	sub	r27, r27
    2088:	fd 01       	movw	r30, r26
    208a:	0d c0       	rjmp	.+26     	; 0x20a6 <__udivmodsi4_ep>

0000208c <__udivmodsi4_loop>:
    208c:	aa 1f       	adc	r26, r26
    208e:	bb 1f       	adc	r27, r27
    2090:	ee 1f       	adc	r30, r30
    2092:	ff 1f       	adc	r31, r31
    2094:	a2 17       	cp	r26, r18
    2096:	b3 07       	cpc	r27, r19
    2098:	e4 07       	cpc	r30, r20
    209a:	f5 07       	cpc	r31, r21
    209c:	20 f0       	brcs	.+8      	; 0x20a6 <__udivmodsi4_ep>
    209e:	a2 1b       	sub	r26, r18
    20a0:	b3 0b       	sbc	r27, r19
    20a2:	e4 0b       	sbc	r30, r20
    20a4:	f5 0b       	sbc	r31, r21

000020a6 <__udivmodsi4_ep>:
    20a6:	66 1f       	adc	r22, r22
    20a8:	77 1f       	adc	r23, r23
    20aa:	88 1f       	adc	r24, r24
    20ac:	99 1f       	adc	r25, r25
    20ae:	1a 94       	dec	r1
    20b0:	69 f7       	brne	.-38     	; 0x208c <__udivmodsi4_loop>
    20b2:	60 95       	com	r22
    20b4:	70 95       	com	r23
    20b6:	80 95       	com	r24
    20b8:	90 95       	com	r25
    20ba:	9b 01       	movw	r18, r22
    20bc:	ac 01       	movw	r20, r24
    20be:	bd 01       	movw	r22, r26
    20c0:	cf 01       	movw	r24, r30
    20c2:	08 95       	ret

000020c4 <__prologue_saves__>:
    20c4:	2f 92       	push	r2
    20c6:	3f 92       	push	r3
    20c8:	4f 92       	push	r4
    20ca:	5f 92       	push	r5
    20cc:	6f 92       	push	r6
    20ce:	7f 92       	push	r7
    20d0:	8f 92       	push	r8
    20d2:	9f 92       	push	r9
    20d4:	af 92       	push	r10
    20d6:	bf 92       	push	r11
    20d8:	cf 92       	push	r12
    20da:	df 92       	push	r13
    20dc:	ef 92       	push	r14
    20de:	ff 92       	push	r15
    20e0:	0f 93       	push	r16
    20e2:	1f 93       	push	r17
    20e4:	cf 93       	push	r28
    20e6:	df 93       	push	r29
    20e8:	cd b7       	in	r28, 0x3d	; 61
    20ea:	de b7       	in	r29, 0x3e	; 62
    20ec:	ca 1b       	sub	r28, r26
    20ee:	db 0b       	sbc	r29, r27
    20f0:	0f b6       	in	r0, 0x3f	; 63
    20f2:	f8 94       	cli
    20f4:	de bf       	out	0x3e, r29	; 62
    20f6:	0f be       	out	0x3f, r0	; 63
    20f8:	cd bf       	out	0x3d, r28	; 61
    20fa:	09 94       	ijmp

000020fc <__epilogue_restores__>:
    20fc:	2a 88       	ldd	r2, Y+18	; 0x12
    20fe:	39 88       	ldd	r3, Y+17	; 0x11
    2100:	48 88       	ldd	r4, Y+16	; 0x10
    2102:	5f 84       	ldd	r5, Y+15	; 0x0f
    2104:	6e 84       	ldd	r6, Y+14	; 0x0e
    2106:	7d 84       	ldd	r7, Y+13	; 0x0d
    2108:	8c 84       	ldd	r8, Y+12	; 0x0c
    210a:	9b 84       	ldd	r9, Y+11	; 0x0b
    210c:	aa 84       	ldd	r10, Y+10	; 0x0a
    210e:	b9 84       	ldd	r11, Y+9	; 0x09
    2110:	c8 84       	ldd	r12, Y+8	; 0x08
    2112:	df 80       	ldd	r13, Y+7	; 0x07
    2114:	ee 80       	ldd	r14, Y+6	; 0x06
    2116:	fd 80       	ldd	r15, Y+5	; 0x05
    2118:	0c 81       	ldd	r16, Y+4	; 0x04
    211a:	1b 81       	ldd	r17, Y+3	; 0x03
    211c:	aa 81       	ldd	r26, Y+2	; 0x02
    211e:	b9 81       	ldd	r27, Y+1	; 0x01
    2120:	ce 0f       	add	r28, r30
    2122:	d1 1d       	adc	r29, r1
    2124:	0f b6       	in	r0, 0x3f	; 63
    2126:	f8 94       	cli
    2128:	de bf       	out	0x3e, r29	; 62
    212a:	0f be       	out	0x3f, r0	; 63
    212c:	cd bf       	out	0x3d, r28	; 61
    212e:	ed 01       	movw	r28, r26
    2130:	08 95       	ret

00002132 <_exit>:
    2132:	f8 94       	cli

00002134 <__stop_program>:
    2134:	ff cf       	rjmp	.-2      	; 0x2134 <__stop_program>
